
BME280_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cd4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002e5c  08002e5c  00012e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002e6c  08002e6c  00012e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002e74  08002e74  00012e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002e78  08002e78  00012e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002e7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000000c4  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000d0  200000d0  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00008e0b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001591  00000000  00000000  00028e47  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000700  00000000  00000000  0002a3d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000658  00000000  00000000  0002aad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003166  00000000  00000000  0002b130  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002da3  00000000  00000000  0002e296  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00031039  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001bc4  00000000  00000000  000310b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002e44 	.word	0x08002e44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002e44 	.word	0x08002e44

080001c8 <__aeabi_ldivmod>:
 80001c8:	b97b      	cbnz	r3, 80001ea <__aeabi_ldivmod+0x22>
 80001ca:	b972      	cbnz	r2, 80001ea <__aeabi_ldivmod+0x22>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bfbe      	ittt	lt
 80001d0:	2000      	movlt	r0, #0
 80001d2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80001d6:	e006      	blt.n	80001e6 <__aeabi_ldivmod+0x1e>
 80001d8:	bf08      	it	eq
 80001da:	2800      	cmpeq	r0, #0
 80001dc:	bf1c      	itt	ne
 80001de:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80001e2:	f04f 30ff 	movne.w	r0, #4294967295
 80001e6:	f000 b9c5 	b.w	8000574 <__aeabi_idiv0>
 80001ea:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f2:	2900      	cmp	r1, #0
 80001f4:	db09      	blt.n	800020a <__aeabi_ldivmod+0x42>
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	db1a      	blt.n	8000230 <__aeabi_ldivmod+0x68>
 80001fa:	f000 f84d 	bl	8000298 <__udivmoddi4>
 80001fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000206:	b004      	add	sp, #16
 8000208:	4770      	bx	lr
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	2b00      	cmp	r3, #0
 8000212:	db1b      	blt.n	800024c <__aeabi_ldivmod+0x84>
 8000214:	f000 f840 	bl	8000298 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4240      	negs	r0, r0
 8000224:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000228:	4252      	negs	r2, r2
 800022a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800022e:	4770      	bx	lr
 8000230:	4252      	negs	r2, r2
 8000232:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000236:	f000 f82f 	bl	8000298 <__udivmoddi4>
 800023a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000242:	b004      	add	sp, #16
 8000244:	4240      	negs	r0, r0
 8000246:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024a:	4770      	bx	lr
 800024c:	4252      	negs	r2, r2
 800024e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000252:	f000 f821 	bl	8000298 <__udivmoddi4>
 8000256:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025e:	b004      	add	sp, #16
 8000260:	4252      	negs	r2, r2
 8000262:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000266:	4770      	bx	lr

08000268 <__aeabi_uldivmod>:
 8000268:	b953      	cbnz	r3, 8000280 <__aeabi_uldivmod+0x18>
 800026a:	b94a      	cbnz	r2, 8000280 <__aeabi_uldivmod+0x18>
 800026c:	2900      	cmp	r1, #0
 800026e:	bf08      	it	eq
 8000270:	2800      	cmpeq	r0, #0
 8000272:	bf1c      	itt	ne
 8000274:	f04f 31ff 	movne.w	r1, #4294967295
 8000278:	f04f 30ff 	movne.w	r0, #4294967295
 800027c:	f000 b97a 	b.w	8000574 <__aeabi_idiv0>
 8000280:	f1ad 0c08 	sub.w	ip, sp, #8
 8000284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000288:	f000 f806 	bl	8000298 <__udivmoddi4>
 800028c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000294:	b004      	add	sp, #16
 8000296:	4770      	bx	lr

08000298 <__udivmoddi4>:
 8000298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800029c:	468c      	mov	ip, r1
 800029e:	460d      	mov	r5, r1
 80002a0:	4604      	mov	r4, r0
 80002a2:	9e08      	ldr	r6, [sp, #32]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d151      	bne.n	800034c <__udivmoddi4+0xb4>
 80002a8:	428a      	cmp	r2, r1
 80002aa:	4617      	mov	r7, r2
 80002ac:	d96d      	bls.n	800038a <__udivmoddi4+0xf2>
 80002ae:	fab2 fe82 	clz	lr, r2
 80002b2:	f1be 0f00 	cmp.w	lr, #0
 80002b6:	d00b      	beq.n	80002d0 <__udivmoddi4+0x38>
 80002b8:	f1ce 0c20 	rsb	ip, lr, #32
 80002bc:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002c4:	fa02 f70e 	lsl.w	r7, r2, lr
 80002c8:	ea4c 0c05 	orr.w	ip, ip, r5
 80002cc:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002d4:	0c25      	lsrs	r5, r4, #16
 80002d6:	fbbc f8fa 	udiv	r8, ip, sl
 80002da:	fa1f f987 	uxth.w	r9, r7
 80002de:	fb0a cc18 	mls	ip, sl, r8, ip
 80002e2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002e6:	fb08 f309 	mul.w	r3, r8, r9
 80002ea:	42ab      	cmp	r3, r5
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x6c>
 80002ee:	19ed      	adds	r5, r5, r7
 80002f0:	f108 32ff 	add.w	r2, r8, #4294967295
 80002f4:	f080 8123 	bcs.w	800053e <__udivmoddi4+0x2a6>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	f240 8120 	bls.w	800053e <__udivmoddi4+0x2a6>
 80002fe:	f1a8 0802 	sub.w	r8, r8, #2
 8000302:	443d      	add	r5, r7
 8000304:	1aed      	subs	r5, r5, r3
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb5 f0fa 	udiv	r0, r5, sl
 800030c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000310:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000314:	fb00 f909 	mul.w	r9, r0, r9
 8000318:	45a1      	cmp	r9, r4
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x98>
 800031c:	19e4      	adds	r4, r4, r7
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	f080 810a 	bcs.w	800053a <__udivmoddi4+0x2a2>
 8000326:	45a1      	cmp	r9, r4
 8000328:	f240 8107 	bls.w	800053a <__udivmoddi4+0x2a2>
 800032c:	3802      	subs	r0, #2
 800032e:	443c      	add	r4, r7
 8000330:	eba4 0409 	sub.w	r4, r4, r9
 8000334:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000338:	2100      	movs	r1, #0
 800033a:	2e00      	cmp	r6, #0
 800033c:	d061      	beq.n	8000402 <__udivmoddi4+0x16a>
 800033e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000342:	2300      	movs	r3, #0
 8000344:	6034      	str	r4, [r6, #0]
 8000346:	6073      	str	r3, [r6, #4]
 8000348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034c:	428b      	cmp	r3, r1
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0xc8>
 8000350:	2e00      	cmp	r6, #0
 8000352:	d054      	beq.n	80003fe <__udivmoddi4+0x166>
 8000354:	2100      	movs	r1, #0
 8000356:	e886 0021 	stmia.w	r6, {r0, r5}
 800035a:	4608      	mov	r0, r1
 800035c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	f040 808e 	bne.w	8000486 <__udivmoddi4+0x1ee>
 800036a:	42ab      	cmp	r3, r5
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xdc>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80fa 	bhi.w	8000568 <__udivmoddi4+0x2d0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb65 0503 	sbc.w	r5, r5, r3
 800037a:	2001      	movs	r0, #1
 800037c:	46ac      	mov	ip, r5
 800037e:	2e00      	cmp	r6, #0
 8000380:	d03f      	beq.n	8000402 <__udivmoddi4+0x16a>
 8000382:	e886 1010 	stmia.w	r6, {r4, ip}
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	b912      	cbnz	r2, 8000392 <__udivmoddi4+0xfa>
 800038c:	2701      	movs	r7, #1
 800038e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000392:	fab7 fe87 	clz	lr, r7
 8000396:	f1be 0f00 	cmp.w	lr, #0
 800039a:	d134      	bne.n	8000406 <__udivmoddi4+0x16e>
 800039c:	1beb      	subs	r3, r5, r7
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa1f fc87 	uxth.w	ip, r7
 80003a4:	2101      	movs	r1, #1
 80003a6:	fbb3 f8f2 	udiv	r8, r3, r2
 80003aa:	0c25      	lsrs	r5, r4, #16
 80003ac:	fb02 3318 	mls	r3, r2, r8, r3
 80003b0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003b4:	fb0c f308 	mul.w	r3, ip, r8
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x134>
 80003bc:	19ed      	adds	r5, r5, r7
 80003be:	f108 30ff 	add.w	r0, r8, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x132>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	f200 80d1 	bhi.w	800056c <__udivmoddi4+0x2d4>
 80003ca:	4680      	mov	r8, r0
 80003cc:	1aed      	subs	r5, r5, r3
 80003ce:	b2a3      	uxth	r3, r4
 80003d0:	fbb5 f0f2 	udiv	r0, r5, r2
 80003d4:	fb02 5510 	mls	r5, r2, r0, r5
 80003d8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003dc:	fb0c fc00 	mul.w	ip, ip, r0
 80003e0:	45a4      	cmp	ip, r4
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x15c>
 80003e4:	19e4      	adds	r4, r4, r7
 80003e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x15a>
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	f200 80b8 	bhi.w	8000562 <__udivmoddi4+0x2ca>
 80003f2:	4618      	mov	r0, r3
 80003f4:	eba4 040c 	sub.w	r4, r4, ip
 80003f8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fc:	e79d      	b.n	800033a <__udivmoddi4+0xa2>
 80003fe:	4631      	mov	r1, r6
 8000400:	4630      	mov	r0, r6
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	f1ce 0420 	rsb	r4, lr, #32
 800040a:	fa05 f30e 	lsl.w	r3, r5, lr
 800040e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000412:	fa20 f804 	lsr.w	r8, r0, r4
 8000416:	0c3a      	lsrs	r2, r7, #16
 8000418:	fa25 f404 	lsr.w	r4, r5, r4
 800041c:	ea48 0803 	orr.w	r8, r8, r3
 8000420:	fbb4 f1f2 	udiv	r1, r4, r2
 8000424:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000428:	fb02 4411 	mls	r4, r2, r1, r4
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000434:	fb01 f30c 	mul.w	r3, r1, ip
 8000438:	42ab      	cmp	r3, r5
 800043a:	fa00 f40e 	lsl.w	r4, r0, lr
 800043e:	d909      	bls.n	8000454 <__udivmoddi4+0x1bc>
 8000440:	19ed      	adds	r5, r5, r7
 8000442:	f101 30ff 	add.w	r0, r1, #4294967295
 8000446:	f080 808a 	bcs.w	800055e <__udivmoddi4+0x2c6>
 800044a:	42ab      	cmp	r3, r5
 800044c:	f240 8087 	bls.w	800055e <__udivmoddi4+0x2c6>
 8000450:	3902      	subs	r1, #2
 8000452:	443d      	add	r5, r7
 8000454:	1aeb      	subs	r3, r5, r3
 8000456:	fa1f f588 	uxth.w	r5, r8
 800045a:	fbb3 f0f2 	udiv	r0, r3, r2
 800045e:	fb02 3310 	mls	r3, r2, r0, r3
 8000462:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000466:	fb00 f30c 	mul.w	r3, r0, ip
 800046a:	42ab      	cmp	r3, r5
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x1e6>
 800046e:	19ed      	adds	r5, r5, r7
 8000470:	f100 38ff 	add.w	r8, r0, #4294967295
 8000474:	d26f      	bcs.n	8000556 <__udivmoddi4+0x2be>
 8000476:	42ab      	cmp	r3, r5
 8000478:	d96d      	bls.n	8000556 <__udivmoddi4+0x2be>
 800047a:	3802      	subs	r0, #2
 800047c:	443d      	add	r5, r7
 800047e:	1aeb      	subs	r3, r5, r3
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	e78f      	b.n	80003a6 <__udivmoddi4+0x10e>
 8000486:	f1c1 0720 	rsb	r7, r1, #32
 800048a:	fa22 f807 	lsr.w	r8, r2, r7
 800048e:	408b      	lsls	r3, r1
 8000490:	fa05 f401 	lsl.w	r4, r5, r1
 8000494:	ea48 0303 	orr.w	r3, r8, r3
 8000498:	fa20 fe07 	lsr.w	lr, r0, r7
 800049c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	ea4e 0e04 	orr.w	lr, lr, r4
 80004a6:	fbb5 f9fc 	udiv	r9, r5, ip
 80004aa:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004ae:	fb0c 5519 	mls	r5, ip, r9, r5
 80004b2:	fa1f f883 	uxth.w	r8, r3
 80004b6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004ba:	fb09 f408 	mul.w	r4, r9, r8
 80004be:	42ac      	cmp	r4, r5
 80004c0:	fa02 f201 	lsl.w	r2, r2, r1
 80004c4:	fa00 fa01 	lsl.w	sl, r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x244>
 80004ca:	18ed      	adds	r5, r5, r3
 80004cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d0:	d243      	bcs.n	800055a <__udivmoddi4+0x2c2>
 80004d2:	42ac      	cmp	r4, r5
 80004d4:	d941      	bls.n	800055a <__udivmoddi4+0x2c2>
 80004d6:	f1a9 0902 	sub.w	r9, r9, #2
 80004da:	441d      	add	r5, r3
 80004dc:	1b2d      	subs	r5, r5, r4
 80004de:	fa1f fe8e 	uxth.w	lr, lr
 80004e2:	fbb5 f0fc 	udiv	r0, r5, ip
 80004e6:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ea:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004ee:	fb00 f808 	mul.w	r8, r0, r8
 80004f2:	45a0      	cmp	r8, r4
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x26e>
 80004f6:	18e4      	adds	r4, r4, r3
 80004f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80004fc:	d229      	bcs.n	8000552 <__udivmoddi4+0x2ba>
 80004fe:	45a0      	cmp	r8, r4
 8000500:	d927      	bls.n	8000552 <__udivmoddi4+0x2ba>
 8000502:	3802      	subs	r0, #2
 8000504:	441c      	add	r4, r3
 8000506:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050a:	eba4 0408 	sub.w	r4, r4, r8
 800050e:	fba0 8902 	umull	r8, r9, r0, r2
 8000512:	454c      	cmp	r4, r9
 8000514:	46c6      	mov	lr, r8
 8000516:	464d      	mov	r5, r9
 8000518:	d315      	bcc.n	8000546 <__udivmoddi4+0x2ae>
 800051a:	d012      	beq.n	8000542 <__udivmoddi4+0x2aa>
 800051c:	b156      	cbz	r6, 8000534 <__udivmoddi4+0x29c>
 800051e:	ebba 030e 	subs.w	r3, sl, lr
 8000522:	eb64 0405 	sbc.w	r4, r4, r5
 8000526:	fa04 f707 	lsl.w	r7, r4, r7
 800052a:	40cb      	lsrs	r3, r1
 800052c:	431f      	orrs	r7, r3
 800052e:	40cc      	lsrs	r4, r1
 8000530:	6037      	str	r7, [r6, #0]
 8000532:	6074      	str	r4, [r6, #4]
 8000534:	2100      	movs	r1, #0
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	4618      	mov	r0, r3
 800053c:	e6f8      	b.n	8000330 <__udivmoddi4+0x98>
 800053e:	4690      	mov	r8, r2
 8000540:	e6e0      	b.n	8000304 <__udivmoddi4+0x6c>
 8000542:	45c2      	cmp	sl, r8
 8000544:	d2ea      	bcs.n	800051c <__udivmoddi4+0x284>
 8000546:	ebb8 0e02 	subs.w	lr, r8, r2
 800054a:	eb69 0503 	sbc.w	r5, r9, r3
 800054e:	3801      	subs	r0, #1
 8000550:	e7e4      	b.n	800051c <__udivmoddi4+0x284>
 8000552:	4628      	mov	r0, r5
 8000554:	e7d7      	b.n	8000506 <__udivmoddi4+0x26e>
 8000556:	4640      	mov	r0, r8
 8000558:	e791      	b.n	800047e <__udivmoddi4+0x1e6>
 800055a:	4681      	mov	r9, r0
 800055c:	e7be      	b.n	80004dc <__udivmoddi4+0x244>
 800055e:	4601      	mov	r1, r0
 8000560:	e778      	b.n	8000454 <__udivmoddi4+0x1bc>
 8000562:	3802      	subs	r0, #2
 8000564:	443c      	add	r4, r7
 8000566:	e745      	b.n	80003f4 <__udivmoddi4+0x15c>
 8000568:	4608      	mov	r0, r1
 800056a:	e708      	b.n	800037e <__udivmoddi4+0xe6>
 800056c:	f1a8 0802 	sub.w	r8, r8, #2
 8000570:	443d      	add	r5, r7
 8000572:	e72b      	b.n	80003cc <__udivmoddi4+0x134>

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800057c:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <HAL_Init+0x40>)
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <HAL_Init+0x40>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000586:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000588:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <HAL_Init+0x40>)
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <HAL_Init+0x40>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000592:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000594:	4a08      	ldr	r2, [pc, #32]	; (80005b8 <HAL_Init+0x40>)
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <HAL_Init+0x40>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800059e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a0:	2003      	movs	r0, #3
 80005a2:	f000 f92d 	bl	8000800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005a6:	2000      	movs	r0, #0
 80005a8:	f000 f808 	bl	80005bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005ac:	f001 fc38 	bl	8001e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b0:	2300      	movs	r3, #0
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40023c00 	.word	0x40023c00

080005bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <HAL_InitTick+0x54>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <HAL_InitTick+0x58>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	4619      	mov	r1, r3
 80005ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 f937 	bl	800084e <HAL_SYSTICK_Config>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005e6:	2301      	movs	r3, #1
 80005e8:	e00e      	b.n	8000608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2b0f      	cmp	r3, #15
 80005ee:	d80a      	bhi.n	8000606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f0:	2200      	movs	r2, #0
 80005f2:	6879      	ldr	r1, [r7, #4]
 80005f4:	f04f 30ff 	mov.w	r0, #4294967295
 80005f8:	f000 f90d 	bl	8000816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005fc:	4a06      	ldr	r2, [pc, #24]	; (8000618 <HAL_InitTick+0x5c>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000602:	2300      	movs	r3, #0
 8000604:	e000      	b.n	8000608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000606:	2301      	movs	r3, #1
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000008 	.word	0x20000008
 8000614:	20000004 	.word	0x20000004
 8000618:	20000000 	.word	0x20000000

0800061c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <HAL_IncTick+0x20>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	461a      	mov	r2, r3
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_IncTick+0x24>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4413      	add	r3, r2
 800062c:	4a04      	ldr	r2, [pc, #16]	; (8000640 <HAL_IncTick+0x24>)
 800062e:	6013      	str	r3, [r2, #0]
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000004 	.word	0x20000004
 8000640:	20000030 	.word	0x20000030

08000644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return uwTick;
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <HAL_GetTick+0x14>)
 800064a:	681b      	ldr	r3, [r3, #0]
}
 800064c:	4618      	mov	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000030 	.word	0x20000030

0800065c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000664:	f7ff ffee 	bl	8000644 <HAL_GetTick>
 8000668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000674:	d005      	beq.n	8000682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <HAL_Delay+0x40>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	461a      	mov	r2, r3
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	4413      	add	r3, r2
 8000680:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000682:	bf00      	nop
 8000684:	f7ff ffde 	bl	8000644 <HAL_GetTick>
 8000688:	4602      	mov	r2, r0
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	1ad2      	subs	r2, r2, r3
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	429a      	cmp	r2, r3
 8000692:	d3f7      	bcc.n	8000684 <HAL_Delay+0x28>
  {
  }
}
 8000694:	bf00      	nop
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000004 	.word	0x20000004

080006a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f003 0307 	and.w	r3, r3, #7
 80006ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <__NVIC_SetPriorityGrouping+0x44>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006bc:	4013      	ands	r3, r2
 80006be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d2:	4a04      	ldr	r2, [pc, #16]	; (80006e4 <__NVIC_SetPriorityGrouping+0x44>)
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	60d3      	str	r3, [r2, #12]
}
 80006d8:	bf00      	nop
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <__NVIC_GetPriorityGrouping+0x18>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	0a1b      	lsrs	r3, r3, #8
 80006f2:	f003 0307 	and.w	r3, r3, #7
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	6039      	str	r1, [r7, #0]
 800070e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	db0a      	blt.n	800072e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000718:	490d      	ldr	r1, [pc, #52]	; (8000750 <__NVIC_SetPriority+0x4c>)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	683a      	ldr	r2, [r7, #0]
 8000720:	b2d2      	uxtb	r2, r2
 8000722:	0112      	lsls	r2, r2, #4
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	440b      	add	r3, r1
 8000728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800072c:	e00a      	b.n	8000744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072e:	4909      	ldr	r1, [pc, #36]	; (8000754 <__NVIC_SetPriority+0x50>)
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	f003 030f 	and.w	r3, r3, #15
 8000736:	3b04      	subs	r3, #4
 8000738:	683a      	ldr	r2, [r7, #0]
 800073a:	b2d2      	uxtb	r2, r2
 800073c:	0112      	lsls	r2, r2, #4
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	440b      	add	r3, r1
 8000742:	761a      	strb	r2, [r3, #24]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	e000e100 	.word	0xe000e100
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000758:	b480      	push	{r7}
 800075a:	b089      	sub	sp, #36	; 0x24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	f1c3 0307 	rsb	r3, r3, #7
 8000772:	2b04      	cmp	r3, #4
 8000774:	bf28      	it	cs
 8000776:	2304      	movcs	r3, #4
 8000778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	3304      	adds	r3, #4
 800077e:	2b06      	cmp	r3, #6
 8000780:	d902      	bls.n	8000788 <NVIC_EncodePriority+0x30>
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3b03      	subs	r3, #3
 8000786:	e000      	b.n	800078a <NVIC_EncodePriority+0x32>
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	2201      	movs	r2, #1
 800078e:	69bb      	ldr	r3, [r7, #24]
 8000790:	fa02 f303 	lsl.w	r3, r2, r3
 8000794:	1e5a      	subs	r2, r3, #1
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	401a      	ands	r2, r3
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800079e:	2101      	movs	r1, #1
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	fa01 f303 	lsl.w	r3, r1, r3
 80007a6:	1e59      	subs	r1, r3, #1
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ac:	4313      	orrs	r3, r2
         );
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3724      	adds	r7, #36	; 0x24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
	...

080007bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3b01      	subs	r3, #1
 80007c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007cc:	d301      	bcc.n	80007d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ce:	2301      	movs	r3, #1
 80007d0:	e00f      	b.n	80007f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d2:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <SysTick_Config+0x40>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007da:	210f      	movs	r1, #15
 80007dc:	f04f 30ff 	mov.w	r0, #4294967295
 80007e0:	f7ff ff90 	bl	8000704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <SysTick_Config+0x40>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ea:	4b04      	ldr	r3, [pc, #16]	; (80007fc <SysTick_Config+0x40>)
 80007ec:	2207      	movs	r2, #7
 80007ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	e000e010 	.word	0xe000e010

08000800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ff49 	bl	80006a0 <__NVIC_SetPriorityGrouping>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000816:	b580      	push	{r7, lr}
 8000818:	b086      	sub	sp, #24
 800081a:	af00      	add	r7, sp, #0
 800081c:	4603      	mov	r3, r0
 800081e:	60b9      	str	r1, [r7, #8]
 8000820:	607a      	str	r2, [r7, #4]
 8000822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000828:	f7ff ff5e 	bl	80006e8 <__NVIC_GetPriorityGrouping>
 800082c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	68b9      	ldr	r1, [r7, #8]
 8000832:	6978      	ldr	r0, [r7, #20]
 8000834:	f7ff ff90 	bl	8000758 <NVIC_EncodePriority>
 8000838:	4602      	mov	r2, r0
 800083a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800083e:	4611      	mov	r1, r2
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff5f 	bl	8000704 <__NVIC_SetPriority>
}
 8000846:	bf00      	nop
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff ffb0 	bl	80007bc <SysTick_Config>
 800085c:	4603      	mov	r3, r0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000868:	b480      	push	{r7}
 800086a:	b089      	sub	sp, #36	; 0x24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
 8000882:	e16b      	b.n	8000b5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000884:	2201      	movs	r2, #1
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	4013      	ands	r3, r2
 8000896:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000898:	693a      	ldr	r2, [r7, #16]
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	429a      	cmp	r2, r3
 800089e:	f040 815a 	bne.w	8000b56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d003      	beq.n	80008b2 <HAL_GPIO_Init+0x4a>
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	2b12      	cmp	r3, #18
 80008b0:	d123      	bne.n	80008fa <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	08da      	lsrs	r2, r3, #3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	3208      	adds	r2, #8
 80008ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	220f      	movs	r2, #15
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	43db      	mvns	r3, r3
 80008d0:	69ba      	ldr	r2, [r7, #24]
 80008d2:	4013      	ands	r3, r2
 80008d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	691a      	ldr	r2, [r3, #16]
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	f003 0307 	and.w	r3, r3, #7
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	69ba      	ldr	r2, [r7, #24]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	08da      	lsrs	r2, r3, #3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3208      	adds	r2, #8
 80008f4:	69b9      	ldr	r1, [r7, #24]
 80008f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	2203      	movs	r2, #3
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	43db      	mvns	r3, r3
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	4013      	ands	r3, r2
 8000910:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	f003 0203 	and.w	r2, r3, #3
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	69ba      	ldr	r2, [r7, #24]
 8000924:	4313      	orrs	r3, r2
 8000926:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	69ba      	ldr	r2, [r7, #24]
 800092c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d00b      	beq.n	800094e <HAL_GPIO_Init+0xe6>
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	2b02      	cmp	r3, #2
 800093c:	d007      	beq.n	800094e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000942:	2b11      	cmp	r3, #17
 8000944:	d003      	beq.n	800094e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	2b12      	cmp	r3, #18
 800094c:	d130      	bne.n	80009b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	2203      	movs	r2, #3
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	43db      	mvns	r3, r3
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	4013      	ands	r3, r2
 8000964:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	68da      	ldr	r2, [r3, #12]
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	69ba      	ldr	r2, [r7, #24]
 8000974:	4313      	orrs	r3, r2
 8000976:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	69ba      	ldr	r2, [r7, #24]
 800097c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000984:	2201      	movs	r2, #1
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	43db      	mvns	r3, r3
 800098e:	69ba      	ldr	r2, [r7, #24]
 8000990:	4013      	ands	r3, r2
 8000992:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	091b      	lsrs	r3, r3, #4
 800099a:	f003 0201 	and.w	r2, r3, #1
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	2203      	movs	r2, #3
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	43db      	mvns	r3, r3
 80009c2:	69ba      	ldr	r2, [r7, #24]
 80009c4:	4013      	ands	r3, r2
 80009c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	689a      	ldr	r2, [r3, #8]
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	69ba      	ldr	r2, [r7, #24]
 80009de:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	f000 80b4 	beq.w	8000b56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4a5f      	ldr	r2, [pc, #380]	; (8000b70 <HAL_GPIO_Init+0x308>)
 80009f4:	4b5e      	ldr	r3, [pc, #376]	; (8000b70 <HAL_GPIO_Init+0x308>)
 80009f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b5c      	ldr	r3, [pc, #368]	; (8000b70 <HAL_GPIO_Init+0x308>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a0a:	4a5a      	ldr	r2, [pc, #360]	; (8000b74 <HAL_GPIO_Init+0x30c>)
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	089b      	lsrs	r3, r3, #2
 8000a10:	3302      	adds	r3, #2
 8000a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	f003 0303 	and.w	r3, r3, #3
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	220f      	movs	r2, #15
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43db      	mvns	r3, r3
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a51      	ldr	r2, [pc, #324]	; (8000b78 <HAL_GPIO_Init+0x310>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d02b      	beq.n	8000a8e <HAL_GPIO_Init+0x226>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a50      	ldr	r2, [pc, #320]	; (8000b7c <HAL_GPIO_Init+0x314>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d025      	beq.n	8000a8a <HAL_GPIO_Init+0x222>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a4f      	ldr	r2, [pc, #316]	; (8000b80 <HAL_GPIO_Init+0x318>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d01f      	beq.n	8000a86 <HAL_GPIO_Init+0x21e>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a4e      	ldr	r2, [pc, #312]	; (8000b84 <HAL_GPIO_Init+0x31c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d019      	beq.n	8000a82 <HAL_GPIO_Init+0x21a>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a4d      	ldr	r2, [pc, #308]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d013      	beq.n	8000a7e <HAL_GPIO_Init+0x216>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a4c      	ldr	r2, [pc, #304]	; (8000b8c <HAL_GPIO_Init+0x324>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d00d      	beq.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a4b      	ldr	r2, [pc, #300]	; (8000b90 <HAL_GPIO_Init+0x328>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d007      	beq.n	8000a76 <HAL_GPIO_Init+0x20e>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a4a      	ldr	r2, [pc, #296]	; (8000b94 <HAL_GPIO_Init+0x32c>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d101      	bne.n	8000a72 <HAL_GPIO_Init+0x20a>
 8000a6e:	2307      	movs	r3, #7
 8000a70:	e00e      	b.n	8000a90 <HAL_GPIO_Init+0x228>
 8000a72:	2308      	movs	r3, #8
 8000a74:	e00c      	b.n	8000a90 <HAL_GPIO_Init+0x228>
 8000a76:	2306      	movs	r3, #6
 8000a78:	e00a      	b.n	8000a90 <HAL_GPIO_Init+0x228>
 8000a7a:	2305      	movs	r3, #5
 8000a7c:	e008      	b.n	8000a90 <HAL_GPIO_Init+0x228>
 8000a7e:	2304      	movs	r3, #4
 8000a80:	e006      	b.n	8000a90 <HAL_GPIO_Init+0x228>
 8000a82:	2303      	movs	r3, #3
 8000a84:	e004      	b.n	8000a90 <HAL_GPIO_Init+0x228>
 8000a86:	2302      	movs	r3, #2
 8000a88:	e002      	b.n	8000a90 <HAL_GPIO_Init+0x228>
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e000      	b.n	8000a90 <HAL_GPIO_Init+0x228>
 8000a8e:	2300      	movs	r3, #0
 8000a90:	69fa      	ldr	r2, [r7, #28]
 8000a92:	f002 0203 	and.w	r2, r2, #3
 8000a96:	0092      	lsls	r2, r2, #2
 8000a98:	4093      	lsls	r3, r2
 8000a9a:	69ba      	ldr	r2, [r7, #24]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000aa0:	4934      	ldr	r1, [pc, #208]	; (8000b74 <HAL_GPIO_Init+0x30c>)
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	089b      	lsrs	r3, r3, #2
 8000aa6:	3302      	adds	r3, #2
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aae:	4b3a      	ldr	r3, [pc, #232]	; (8000b98 <HAL_GPIO_Init+0x330>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	4013      	ands	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ad2:	4a31      	ldr	r2, [pc, #196]	; (8000b98 <HAL_GPIO_Init+0x330>)
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ad8:	4b2f      	ldr	r3, [pc, #188]	; (8000b98 <HAL_GPIO_Init+0x330>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	69ba      	ldr	r2, [r7, #24]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d003      	beq.n	8000afc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000afc:	4a26      	ldr	r2, [pc, #152]	; (8000b98 <HAL_GPIO_Init+0x330>)
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b02:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <HAL_GPIO_Init+0x330>)
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b26:	4a1c      	ldr	r2, [pc, #112]	; (8000b98 <HAL_GPIO_Init+0x330>)
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <HAL_GPIO_Init+0x330>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	43db      	mvns	r3, r3
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d003      	beq.n	8000b50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b50:	4a11      	ldr	r2, [pc, #68]	; (8000b98 <HAL_GPIO_Init+0x330>)
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	61fb      	str	r3, [r7, #28]
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	2b0f      	cmp	r3, #15
 8000b60:	f67f ae90 	bls.w	8000884 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b64:	bf00      	nop
 8000b66:	3724      	adds	r7, #36	; 0x24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40013800 	.word	0x40013800
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	40020400 	.word	0x40020400
 8000b80:	40020800 	.word	0x40020800
 8000b84:	40020c00 	.word	0x40020c00
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40021400 	.word	0x40021400
 8000b90:	40021800 	.word	0x40021800
 8000b94:	40021c00 	.word	0x40021c00
 8000b98:	40013c00 	.word	0x40013c00

08000b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	807b      	strh	r3, [r7, #2]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bac:	787b      	ldrb	r3, [r7, #1]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bb2:	887a      	ldrh	r2, [r7, #2]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bb8:	e003      	b.n	8000bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bba:	887b      	ldrh	r3, [r7, #2]
 8000bbc:	041a      	lsls	r2, r3, #16
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	619a      	str	r2, [r3, #24]
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d101      	bne.n	8000be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e22d      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d075      	beq.n	8000cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bee:	4ba3      	ldr	r3, [pc, #652]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	f003 030c 	and.w	r3, r3, #12
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	d00c      	beq.n	8000c14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bfa:	4ba0      	ldr	r3, [pc, #640]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c02:	2b08      	cmp	r3, #8
 8000c04:	d112      	bne.n	8000c2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c06:	4b9d      	ldr	r3, [pc, #628]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c12:	d10b      	bne.n	8000c2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c14:	4b99      	ldr	r3, [pc, #612]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d05b      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x108>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d157      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e208      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c34:	d106      	bne.n	8000c44 <HAL_RCC_OscConfig+0x74>
 8000c36:	4a91      	ldr	r2, [pc, #580]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c38:	4b90      	ldr	r3, [pc, #576]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	e01d      	b.n	8000c80 <HAL_RCC_OscConfig+0xb0>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c4c:	d10c      	bne.n	8000c68 <HAL_RCC_OscConfig+0x98>
 8000c4e:	4a8b      	ldr	r2, [pc, #556]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c50:	4b8a      	ldr	r3, [pc, #552]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	4a88      	ldr	r2, [pc, #544]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c5c:	4b87      	ldr	r3, [pc, #540]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e00b      	b.n	8000c80 <HAL_RCC_OscConfig+0xb0>
 8000c68:	4a84      	ldr	r2, [pc, #528]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c6a:	4b84      	ldr	r3, [pc, #528]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c72:	6013      	str	r3, [r2, #0]
 8000c74:	4a81      	ldr	r2, [pc, #516]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c76:	4b81      	ldr	r3, [pc, #516]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d013      	beq.n	8000cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c88:	f7ff fcdc 	bl	8000644 <HAL_GetTick>
 8000c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8e:	e008      	b.n	8000ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c90:	f7ff fcd8 	bl	8000644 <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b64      	cmp	r3, #100	; 0x64
 8000c9c:	d901      	bls.n	8000ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e1cd      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca2:	4b76      	ldr	r3, [pc, #472]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d0f0      	beq.n	8000c90 <HAL_RCC_OscConfig+0xc0>
 8000cae:	e014      	b.n	8000cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb0:	f7ff fcc8 	bl	8000644 <HAL_GetTick>
 8000cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb6:	e008      	b.n	8000cca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cb8:	f7ff fcc4 	bl	8000644 <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	2b64      	cmp	r3, #100	; 0x64
 8000cc4:	d901      	bls.n	8000cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e1b9      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cca:	4b6c      	ldr	r3, [pc, #432]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1f0      	bne.n	8000cb8 <HAL_RCC_OscConfig+0xe8>
 8000cd6:	e000      	b.n	8000cda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d063      	beq.n	8000dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ce6:	4b65      	ldr	r3, [pc, #404]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	f003 030c 	and.w	r3, r3, #12
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d00b      	beq.n	8000d0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cf2:	4b62      	ldr	r3, [pc, #392]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cfa:	2b08      	cmp	r3, #8
 8000cfc:	d11c      	bne.n	8000d38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cfe:	4b5f      	ldr	r3, [pc, #380]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d116      	bne.n	8000d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d0a:	4b5c      	ldr	r3, [pc, #368]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d005      	beq.n	8000d22 <HAL_RCC_OscConfig+0x152>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d001      	beq.n	8000d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e18d      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d22:	4956      	ldr	r1, [pc, #344]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d24:	4b55      	ldr	r3, [pc, #340]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	691b      	ldr	r3, [r3, #16]
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	4313      	orrs	r3, r2
 8000d34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d36:	e03a      	b.n	8000dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d020      	beq.n	8000d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d40:	4b4f      	ldr	r3, [pc, #316]	; (8000e80 <HAL_RCC_OscConfig+0x2b0>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d46:	f7ff fc7d 	bl	8000644 <HAL_GetTick>
 8000d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d4c:	e008      	b.n	8000d60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d4e:	f7ff fc79 	bl	8000644 <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d901      	bls.n	8000d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	e16e      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d60:	4b46      	ldr	r3, [pc, #280]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d0f0      	beq.n	8000d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d6c:	4943      	ldr	r1, [pc, #268]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d6e:	4b43      	ldr	r3, [pc, #268]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	691b      	ldr	r3, [r3, #16]
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	600b      	str	r3, [r1, #0]
 8000d80:	e015      	b.n	8000dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d82:	4b3f      	ldr	r3, [pc, #252]	; (8000e80 <HAL_RCC_OscConfig+0x2b0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d88:	f7ff fc5c 	bl	8000644 <HAL_GetTick>
 8000d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d8e:	e008      	b.n	8000da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d90:	f7ff fc58 	bl	8000644 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d901      	bls.n	8000da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e14d      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000da2:	4b36      	ldr	r3, [pc, #216]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d1f0      	bne.n	8000d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d030      	beq.n	8000e1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d016      	beq.n	8000df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dc2:	4b30      	ldr	r3, [pc, #192]	; (8000e84 <HAL_RCC_OscConfig+0x2b4>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dc8:	f7ff fc3c 	bl	8000644 <HAL_GetTick>
 8000dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dce:	e008      	b.n	8000de2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dd0:	f7ff fc38 	bl	8000644 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e12d      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de2:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f0      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x200>
 8000dee:	e015      	b.n	8000e1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000df0:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <HAL_RCC_OscConfig+0x2b4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df6:	f7ff fc25 	bl	8000644 <HAL_GetTick>
 8000dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dfc:	e008      	b.n	8000e10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dfe:	f7ff fc21 	bl	8000644 <HAL_GetTick>
 8000e02:	4602      	mov	r2, r0
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d901      	bls.n	8000e10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	e116      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1f0      	bne.n	8000dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f003 0304 	and.w	r3, r3, #4
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f000 80a0 	beq.w	8000f6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d10f      	bne.n	8000e5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4a0f      	ldr	r2, [pc, #60]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e48:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e56:	2301      	movs	r3, #1
 8000e58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_RCC_OscConfig+0x2b8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d121      	bne.n	8000eaa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e66:	4a08      	ldr	r2, [pc, #32]	; (8000e88 <HAL_RCC_OscConfig+0x2b8>)
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <HAL_RCC_OscConfig+0x2b8>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e72:	f7ff fbe7 	bl	8000644 <HAL_GetTick>
 8000e76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e78:	e011      	b.n	8000e9e <HAL_RCC_OscConfig+0x2ce>
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	42470000 	.word	0x42470000
 8000e84:	42470e80 	.word	0x42470e80
 8000e88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e8c:	f7ff fbda 	bl	8000644 <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d901      	bls.n	8000e9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e0cf      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e9e:	4b6a      	ldr	r3, [pc, #424]	; (8001048 <HAL_RCC_OscConfig+0x478>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0f0      	beq.n	8000e8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d106      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x2f0>
 8000eb2:	4a66      	ldr	r2, [pc, #408]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000eb4:	4b65      	ldr	r3, [pc, #404]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8000ebe:	e01c      	b.n	8000efa <HAL_RCC_OscConfig+0x32a>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	2b05      	cmp	r3, #5
 8000ec6:	d10c      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x312>
 8000ec8:	4a60      	ldr	r2, [pc, #384]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000eca:	4b60      	ldr	r3, [pc, #384]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8000ed4:	4a5d      	ldr	r2, [pc, #372]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000ed6:	4b5d      	ldr	r3, [pc, #372]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6713      	str	r3, [r2, #112]	; 0x70
 8000ee0:	e00b      	b.n	8000efa <HAL_RCC_OscConfig+0x32a>
 8000ee2:	4a5a      	ldr	r2, [pc, #360]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000ee4:	4b59      	ldr	r3, [pc, #356]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ee8:	f023 0301 	bic.w	r3, r3, #1
 8000eec:	6713      	str	r3, [r2, #112]	; 0x70
 8000eee:	4a57      	ldr	r2, [pc, #348]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000ef0:	4b56      	ldr	r3, [pc, #344]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ef4:	f023 0304 	bic.w	r3, r3, #4
 8000ef8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d015      	beq.n	8000f2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f02:	f7ff fb9f 	bl	8000644 <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f08:	e00a      	b.n	8000f20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f0a:	f7ff fb9b 	bl	8000644 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e08e      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f20:	4b4a      	ldr	r3, [pc, #296]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d0ee      	beq.n	8000f0a <HAL_RCC_OscConfig+0x33a>
 8000f2c:	e014      	b.n	8000f58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2e:	f7ff fb89 	bl	8000644 <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f34:	e00a      	b.n	8000f4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f36:	f7ff fb85 	bl	8000644 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e078      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f4c:	4b3f      	ldr	r3, [pc, #252]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1ee      	bne.n	8000f36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f58:	7dfb      	ldrb	r3, [r7, #23]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d105      	bne.n	8000f6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f5e:	4a3b      	ldr	r2, [pc, #236]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000f60:	4b3a      	ldr	r3, [pc, #232]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d064      	beq.n	800103c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f72:	4b36      	ldr	r3, [pc, #216]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f003 030c 	and.w	r3, r3, #12
 8000f7a:	2b08      	cmp	r3, #8
 8000f7c:	d05c      	beq.n	8001038 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d141      	bne.n	800100a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f86:	4b32      	ldr	r3, [pc, #200]	; (8001050 <HAL_RCC_OscConfig+0x480>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fb5a 	bl	8000644 <HAL_GetTick>
 8000f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f94:	f7ff fb56 	bl	8000644 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e04b      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fa6:	4b29      	ldr	r3, [pc, #164]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f0      	bne.n	8000f94 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000fb2:	4926      	ldr	r1, [pc, #152]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69da      	ldr	r2, [r3, #28]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc2:	019b      	lsls	r3, r3, #6
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fca:	085b      	lsrs	r3, r3, #1
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	041b      	lsls	r3, r3, #16
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd6:	061b      	lsls	r3, r3, #24
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <HAL_RCC_OscConfig+0x480>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe2:	f7ff fb2f 	bl	8000644 <HAL_GetTick>
 8000fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fe8:	e008      	b.n	8000ffc <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fea:	f7ff fb2b 	bl	8000644 <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e020      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0f0      	beq.n	8000fea <HAL_RCC_OscConfig+0x41a>
 8001008:	e018      	b.n	800103c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_RCC_OscConfig+0x480>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001010:	f7ff fb18 	bl	8000644 <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001018:	f7ff fb14 	bl	8000644 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e009      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_RCC_OscConfig+0x47c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f0      	bne.n	8001018 <HAL_RCC_OscConfig+0x448>
 8001036:	e001      	b.n	800103c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e000      	b.n	800103e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40007000 	.word	0x40007000
 800104c:	40023800 	.word	0x40023800
 8001050:	42470060 	.word	0x42470060

08001054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e0ca      	b.n	80011fe <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001068:	4b67      	ldr	r3, [pc, #412]	; (8001208 <HAL_RCC_ClockConfig+0x1b4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 020f 	and.w	r2, r3, #15
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	429a      	cmp	r2, r3
 8001074:	d20c      	bcs.n	8001090 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001076:	4b64      	ldr	r3, [pc, #400]	; (8001208 <HAL_RCC_ClockConfig+0x1b4>)
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800107e:	4b62      	ldr	r3, [pc, #392]	; (8001208 <HAL_RCC_ClockConfig+0x1b4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 020f 	and.w	r2, r3, #15
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	429a      	cmp	r2, r3
 800108a:	d001      	beq.n	8001090 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e0b6      	b.n	80011fe <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d020      	beq.n	80010de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0304 	and.w	r3, r3, #4
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010a8:	4a58      	ldr	r2, [pc, #352]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 80010aa:	4b58      	ldr	r3, [pc, #352]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d005      	beq.n	80010cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010c0:	4a52      	ldr	r2, [pc, #328]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 80010c2:	4b52      	ldr	r3, [pc, #328]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010cc:	494f      	ldr	r1, [pc, #316]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 80010ce:	4b4f      	ldr	r3, [pc, #316]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	4313      	orrs	r3, r2
 80010dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d044      	beq.n	8001174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d107      	bne.n	8001102 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f2:	4b46      	ldr	r3, [pc, #280]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d119      	bne.n	8001132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e07d      	b.n	80011fe <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b02      	cmp	r3, #2
 8001108:	d003      	beq.n	8001112 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800110e:	2b03      	cmp	r3, #3
 8001110:	d107      	bne.n	8001122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001112:	4b3e      	ldr	r3, [pc, #248]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d109      	bne.n	8001132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e06d      	b.n	80011fe <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001122:	4b3a      	ldr	r3, [pc, #232]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e065      	b.n	80011fe <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001132:	4936      	ldr	r1, [pc, #216]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 8001134:	4b35      	ldr	r3, [pc, #212]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f023 0203 	bic.w	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	4313      	orrs	r3, r2
 8001142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001144:	f7ff fa7e 	bl	8000644 <HAL_GetTick>
 8001148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800114a:	e00a      	b.n	8001162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800114c:	f7ff fa7a 	bl	8000644 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	f241 3288 	movw	r2, #5000	; 0x1388
 800115a:	4293      	cmp	r3, r2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e04d      	b.n	80011fe <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001162:	4b2a      	ldr	r3, [pc, #168]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 020c 	and.w	r2, r3, #12
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	429a      	cmp	r2, r3
 8001172:	d1eb      	bne.n	800114c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001174:	4b24      	ldr	r3, [pc, #144]	; (8001208 <HAL_RCC_ClockConfig+0x1b4>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 020f 	and.w	r2, r3, #15
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	d90c      	bls.n	800119c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001182:	4b21      	ldr	r3, [pc, #132]	; (8001208 <HAL_RCC_ClockConfig+0x1b4>)
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800118a:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <HAL_RCC_ClockConfig+0x1b4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 020f 	and.w	r2, r3, #15
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	429a      	cmp	r2, r3
 8001196:	d001      	beq.n	800119c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e030      	b.n	80011fe <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d008      	beq.n	80011ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011a8:	4918      	ldr	r1, [pc, #96]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d009      	beq.n	80011da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011c6:	4911      	ldr	r1, [pc, #68]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 80011c8:	4b10      	ldr	r3, [pc, #64]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011da:	f000 f81d 	bl	8001218 <HAL_RCC_GetSysClockFreq>
 80011de:	4601      	mov	r1, r0
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_RCC_ClockConfig+0x1b8>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	091b      	lsrs	r3, r3, #4
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	4a09      	ldr	r2, [pc, #36]	; (8001210 <HAL_RCC_ClockConfig+0x1bc>)
 80011ec:	5cd3      	ldrb	r3, [r2, r3]
 80011ee:	fa21 f303 	lsr.w	r3, r1, r3
 80011f2:	4a08      	ldr	r2, [pc, #32]	; (8001214 <HAL_RCC_ClockConfig+0x1c0>)
 80011f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80011f6:	2000      	movs	r0, #0
 80011f8:	f7ff f9e0 	bl	80005bc <HAL_InitTick>

  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023c00 	.word	0x40023c00
 800120c:	40023800 	.word	0x40023800
 8001210:	08002e5c 	.word	0x08002e5c
 8001214:	20000008 	.word	0x20000008

08001218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800121c:	b08f      	sub	sp, #60	; 0x3c
 800121e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001224:	2300      	movs	r3, #0
 8001226:	637b      	str	r3, [r7, #52]	; 0x34
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 800122c:	2300      	movs	r3, #0
 800122e:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001230:	4b62      	ldr	r3, [pc, #392]	; (80013bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 030c 	and.w	r3, r3, #12
 8001238:	2b04      	cmp	r3, #4
 800123a:	d007      	beq.n	800124c <HAL_RCC_GetSysClockFreq+0x34>
 800123c:	2b08      	cmp	r3, #8
 800123e:	d008      	beq.n	8001252 <HAL_RCC_GetSysClockFreq+0x3a>
 8001240:	2b00      	cmp	r3, #0
 8001242:	f040 80b2 	bne.w	80013aa <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001246:	4b5e      	ldr	r3, [pc, #376]	; (80013c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001248:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 800124a:	e0b1      	b.n	80013b0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800124c:	4b5d      	ldr	r3, [pc, #372]	; (80013c4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800124e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001250:	e0ae      	b.n	80013b0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001252:	4b5a      	ldr	r3, [pc, #360]	; (80013bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800125c:	4b57      	ldr	r3, [pc, #348]	; (80013bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d04e      	beq.n	8001306 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001268:	4b54      	ldr	r3, [pc, #336]	; (80013bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	099b      	lsrs	r3, r3, #6
 800126e:	f04f 0400 	mov.w	r4, #0
 8001272:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	ea01 0103 	and.w	r1, r1, r3
 800127e:	ea02 0204 	and.w	r2, r2, r4
 8001282:	460b      	mov	r3, r1
 8001284:	4614      	mov	r4, r2
 8001286:	0160      	lsls	r0, r4, #5
 8001288:	6278      	str	r0, [r7, #36]	; 0x24
 800128a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800128c:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001290:	6278      	str	r0, [r7, #36]	; 0x24
 8001292:	015b      	lsls	r3, r3, #5
 8001294:	623b      	str	r3, [r7, #32]
 8001296:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800129a:	1a5b      	subs	r3, r3, r1
 800129c:	eb64 0402 	sbc.w	r4, r4, r2
 80012a0:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80012a4:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80012a8:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80012ac:	ebb8 0803 	subs.w	r8, r8, r3
 80012b0:	eb69 0904 	sbc.w	r9, r9, r4
 80012b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012b8:	61fb      	str	r3, [r7, #28]
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012c0:	61fb      	str	r3, [r7, #28]
 80012c2:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80012c6:	61bb      	str	r3, [r7, #24]
 80012c8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80012cc:	eb18 0801 	adds.w	r8, r8, r1
 80012d0:	eb49 0902 	adc.w	r9, r9, r2
 80012d4:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80012ec:	4640      	mov	r0, r8
 80012ee:	4649      	mov	r1, r9
 80012f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f2:	f04f 0400 	mov.w	r4, #0
 80012f6:	461a      	mov	r2, r3
 80012f8:	4623      	mov	r3, r4
 80012fa:	f7fe ffb5 	bl	8000268 <__aeabi_uldivmod>
 80012fe:	4603      	mov	r3, r0
 8001300:	460c      	mov	r4, r1
 8001302:	637b      	str	r3, [r7, #52]	; 0x34
 8001304:	e043      	b.n	800138e <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001306:	4b2d      	ldr	r3, [pc, #180]	; (80013bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	099b      	lsrs	r3, r3, #6
 800130c:	f04f 0400 	mov.w	r4, #0
 8001310:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	ea01 0103 	and.w	r1, r1, r3
 800131c:	ea02 0204 	and.w	r2, r2, r4
 8001320:	460b      	mov	r3, r1
 8001322:	4614      	mov	r4, r2
 8001324:	0160      	lsls	r0, r4, #5
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	015b      	lsls	r3, r3, #5
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001338:	1a5b      	subs	r3, r3, r1
 800133a:	eb64 0402 	sbc.w	r4, r4, r2
 800133e:	01a6      	lsls	r6, r4, #6
 8001340:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001344:	019d      	lsls	r5, r3, #6
 8001346:	1aed      	subs	r5, r5, r3
 8001348:	eb66 0604 	sbc.w	r6, r6, r4
 800134c:	00f3      	lsls	r3, r6, #3
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	00eb      	lsls	r3, r5, #3
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001360:	186d      	adds	r5, r5, r1
 8001362:	eb46 0602 	adc.w	r6, r6, r2
 8001366:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 800136a:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800136e:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001372:	4655      	mov	r5, sl
 8001374:	465e      	mov	r6, fp
 8001376:	4628      	mov	r0, r5
 8001378:	4631      	mov	r1, r6
 800137a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800137c:	f04f 0400 	mov.w	r4, #0
 8001380:	461a      	mov	r2, r3
 8001382:	4623      	mov	r3, r4
 8001384:	f7fe ff70 	bl	8000268 <__aeabi_uldivmod>
 8001388:	4603      	mov	r3, r0
 800138a:	460c      	mov	r4, r1
 800138c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	0c1b      	lsrs	r3, r3, #16
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	3301      	adds	r3, #1
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 800139e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013a8:	e002      	b.n	80013b0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80013ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	373c      	adds	r7, #60	; 0x3c
 80013b6:	46bd      	mov	sp, r7
 80013b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013bc:	40023800 	.word	0x40023800
 80013c0:	00f42400 	.word	0x00f42400
 80013c4:	007a1200 	.word	0x007a1200

080013c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e055      	b.n	8001486 <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d106      	bne.n	80013fa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 fd3b 	bl	8001e70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2202      	movs	r2, #2
 80013fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6812      	ldr	r2, [r2, #0]
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001410:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6851      	ldr	r1, [r2, #4]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6892      	ldr	r2, [r2, #8]
 800141e:	4311      	orrs	r1, r2
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	68d2      	ldr	r2, [r2, #12]
 8001424:	4311      	orrs	r1, r2
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6912      	ldr	r2, [r2, #16]
 800142a:	4311      	orrs	r1, r2
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6952      	ldr	r2, [r2, #20]
 8001430:	4311      	orrs	r1, r2
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6992      	ldr	r2, [r2, #24]
 8001436:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800143a:	4311      	orrs	r1, r2
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	69d2      	ldr	r2, [r2, #28]
 8001440:	4311      	orrs	r1, r2
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6a12      	ldr	r2, [r2, #32]
 8001446:	4311      	orrs	r1, r2
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800144c:	430a      	orrs	r2, r1
 800144e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6992      	ldr	r2, [r2, #24]
 8001458:	0c12      	lsrs	r2, r2, #16
 800145a:	f002 0104 	and.w	r1, r2, #4
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001462:	430a      	orrs	r2, r1
 8001464:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	69d2      	ldr	r2, [r2, #28]
 8001470:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001474:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b088      	sub	sp, #32
 8001492:	af00      	add	r7, sp, #0
 8001494:	60f8      	str	r0, [r7, #12]
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	4613      	mov	r3, r2
 800149c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <HAL_SPI_Transmit+0x22>
 80014ac:	2302      	movs	r3, #2
 80014ae:	e11c      	b.n	80016ea <HAL_SPI_Transmit+0x25c>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80014b8:	f7ff f8c4 	bl	8000644 <HAL_GetTick>
 80014bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d002      	beq.n	80014d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80014ce:	2302      	movs	r3, #2
 80014d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80014d2:	e101      	b.n	80016d8 <HAL_SPI_Transmit+0x24a>
  }

  if ((pData == NULL) || (Size == 0U))
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d002      	beq.n	80014e0 <HAL_SPI_Transmit+0x52>
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80014e4:	e0f8      	b.n	80016d8 <HAL_SPI_Transmit+0x24a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2203      	movs	r2, #3
 80014ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2200      	movs	r2, #0
 80014f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	88fa      	ldrh	r2, [r7, #6]
 80014fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	88fa      	ldrh	r2, [r7, #6]
 8001504:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2200      	movs	r2, #0
 8001510:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800152c:	d107      	bne.n	800153e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800153c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001548:	2b40      	cmp	r3, #64	; 0x40
 800154a:	d007      	beq.n	800155c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800155a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001564:	d14b      	bne.n	80015fe <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <HAL_SPI_Transmit+0xe6>
 800156e:	8afb      	ldrh	r3, [r7, #22]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d13e      	bne.n	80015f2 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800157c:	8812      	ldrh	r2, [r2, #0]
 800157e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	1c9a      	adds	r2, r3, #2
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800158e:	b29b      	uxth	r3, r3
 8001590:	3b01      	subs	r3, #1
 8001592:	b29a      	uxth	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001598:	e02b      	b.n	80015f2 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d112      	bne.n	80015ce <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015b0:	8812      	ldrh	r2, [r2, #0]
 80015b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	1c9a      	adds	r2, r3, #2
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	3b01      	subs	r3, #1
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80015cc:	e011      	b.n	80015f2 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80015ce:	f7ff f839 	bl	8000644 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	1ad2      	subs	r2, r2, r3
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d303      	bcc.n	80015e6 <HAL_SPI_Transmit+0x158>
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e4:	d102      	bne.n	80015ec <HAL_SPI_Transmit+0x15e>
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d102      	bne.n	80015f2 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80015f0:	e072      	b.n	80016d8 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1ce      	bne.n	800159a <HAL_SPI_Transmit+0x10c>
 80015fc:	e04c      	b.n	8001698 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d002      	beq.n	800160c <HAL_SPI_Transmit+0x17e>
 8001606:	8afb      	ldrh	r3, [r7, #22]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d140      	bne.n	800168e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	330c      	adds	r3, #12
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001616:	7812      	ldrb	r2, [r2, #0]
 8001618:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001628:	b29b      	uxth	r3, r3
 800162a:	3b01      	subs	r3, #1
 800162c:	b29a      	uxth	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001632:	e02c      	b.n	800168e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b02      	cmp	r3, #2
 8001640:	d113      	bne.n	800166a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	330c      	adds	r3, #12
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800164c:	7812      	ldrb	r2, [r2, #0]
 800164e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800165e:	b29b      	uxth	r3, r3
 8001660:	3b01      	subs	r3, #1
 8001662:	b29a      	uxth	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	86da      	strh	r2, [r3, #54]	; 0x36
 8001668:	e011      	b.n	800168e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800166a:	f7fe ffeb 	bl	8000644 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	1ad2      	subs	r2, r2, r3
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d303      	bcc.n	8001682 <HAL_SPI_Transmit+0x1f4>
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001680:	d102      	bne.n	8001688 <HAL_SPI_Transmit+0x1fa>
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800168c:	e024      	b.n	80016d8 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001692:	b29b      	uxth	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1cd      	bne.n	8001634 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	6839      	ldr	r1, [r7, #0]
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f000 fa33 	bl	8001b08 <SPI_EndRxTxTransaction>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d002      	beq.n	80016ae <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2220      	movs	r2, #32
 80016ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10a      	bne.n	80016cc <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_SPI_Transmit+0x24a>
  {
    errorcode = HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80016e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3720      	adds	r7, #32
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b08c      	sub	sp, #48	; 0x30
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	60f8      	str	r0, [r7, #12]
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001700:	2301      	movs	r3, #1
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001710:	2b01      	cmp	r3, #1
 8001712:	d101      	bne.n	8001718 <HAL_SPI_TransmitReceive+0x26>
 8001714:	2302      	movs	r3, #2
 8001716:	e188      	b.n	8001a2a <HAL_SPI_TransmitReceive+0x338>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001720:	f7fe ff90 	bl	8000644 <HAL_GetTick>
 8001724:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800172c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001736:	887b      	ldrh	r3, [r7, #2]
 8001738:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800173a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800173e:	2b01      	cmp	r3, #1
 8001740:	d00f      	beq.n	8001762 <HAL_SPI_TransmitReceive+0x70>
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001748:	d107      	bne.n	800175a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d103      	bne.n	800175a <HAL_SPI_TransmitReceive+0x68>
 8001752:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001756:	2b04      	cmp	r3, #4
 8001758:	d003      	beq.n	8001762 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800175a:	2302      	movs	r3, #2
 800175c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001760:	e159      	b.n	8001a16 <HAL_SPI_TransmitReceive+0x324>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <HAL_SPI_TransmitReceive+0x82>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <HAL_SPI_TransmitReceive+0x82>
 800176e:	887b      	ldrh	r3, [r7, #2]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d103      	bne.n	800177c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800177a:	e14c      	b.n	8001a16 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b04      	cmp	r3, #4
 8001786:	d003      	beq.n	8001790 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2205      	movs	r2, #5
 800178c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2200      	movs	r2, #0
 8001794:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	887a      	ldrh	r2, [r7, #2]
 80017a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	887a      	ldrh	r2, [r7, #2]
 80017a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	887a      	ldrh	r2, [r7, #2]
 80017b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d0:	2b40      	cmp	r3, #64	; 0x40
 80017d2:	d007      	beq.n	80017e4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017ec:	d178      	bne.n	80018e0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d002      	beq.n	80017fc <HAL_SPI_TransmitReceive+0x10a>
 80017f6:	8b7b      	ldrh	r3, [r7, #26]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d166      	bne.n	80018ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001804:	8812      	ldrh	r2, [r2, #0]
 8001806:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	1c9a      	adds	r2, r3, #2
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001816:	b29b      	uxth	r3, r3
 8001818:	3b01      	subs	r3, #1
 800181a:	b29a      	uxth	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001820:	e053      	b.n	80018ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b02      	cmp	r3, #2
 800182e:	d11b      	bne.n	8001868 <HAL_SPI_TransmitReceive+0x176>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001834:	b29b      	uxth	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d016      	beq.n	8001868 <HAL_SPI_TransmitReceive+0x176>
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	2b01      	cmp	r3, #1
 800183e:	d113      	bne.n	8001868 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001848:	8812      	ldrh	r2, [r2, #0]
 800184a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001850:	1c9a      	adds	r2, r3, #2
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800185a:	b29b      	uxth	r3, r3
 800185c:	3b01      	subs	r3, #1
 800185e:	b29a      	uxth	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b01      	cmp	r3, #1
 8001874:	d119      	bne.n	80018aa <HAL_SPI_TransmitReceive+0x1b8>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800187a:	b29b      	uxth	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	d014      	beq.n	80018aa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	68d2      	ldr	r2, [r2, #12]
 800188a:	b292      	uxth	r2, r2
 800188c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001892:	1c9a      	adds	r2, r3, #2
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800189c:	b29b      	uxth	r3, r3
 800189e:	3b01      	subs	r3, #1
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80018a6:	2301      	movs	r3, #1
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80018aa:	f7fe fecb 	bl	8000644 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	1ad2      	subs	r2, r2, r3
 80018b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d307      	bcc.n	80018ca <HAL_SPI_TransmitReceive+0x1d8>
 80018ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c0:	d003      	beq.n	80018ca <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80018c8:	e0a5      	b.n	8001a16 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1a6      	bne.n	8001822 <HAL_SPI_TransmitReceive+0x130>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018d8:	b29b      	uxth	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1a1      	bne.n	8001822 <HAL_SPI_TransmitReceive+0x130>
 80018de:	e07c      	b.n	80019da <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d002      	beq.n	80018ee <HAL_SPI_TransmitReceive+0x1fc>
 80018e8:	8b7b      	ldrh	r3, [r7, #26]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d16b      	bne.n	80019c6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	330c      	adds	r3, #12
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018f8:	7812      	ldrb	r2, [r2, #0]
 80018fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800190a:	b29b      	uxth	r3, r3
 800190c:	3b01      	subs	r3, #1
 800190e:	b29a      	uxth	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001914:	e057      	b.n	80019c6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b02      	cmp	r3, #2
 8001922:	d11c      	bne.n	800195e <HAL_SPI_TransmitReceive+0x26c>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001928:	b29b      	uxth	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d017      	beq.n	800195e <HAL_SPI_TransmitReceive+0x26c>
 800192e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001930:	2b01      	cmp	r3, #1
 8001932:	d114      	bne.n	800195e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	330c      	adds	r3, #12
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800193e:	7812      	ldrb	r2, [r2, #0]
 8001940:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001950:	b29b      	uxth	r3, r3
 8001952:	3b01      	subs	r3, #1
 8001954:	b29a      	uxth	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800195a:	2300      	movs	r3, #0
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b01      	cmp	r3, #1
 800196a:	d119      	bne.n	80019a0 <HAL_SPI_TransmitReceive+0x2ae>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001970:	b29b      	uxth	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d014      	beq.n	80019a0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	6812      	ldr	r2, [r2, #0]
 800197e:	68d2      	ldr	r2, [r2, #12]
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001992:	b29b      	uxth	r3, r3
 8001994:	3b01      	subs	r3, #1
 8001996:	b29a      	uxth	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800199c:	2301      	movs	r3, #1
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80019a0:	f7fe fe50 	bl	8000644 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	1ad2      	subs	r2, r2, r3
 80019aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d303      	bcc.n	80019b8 <HAL_SPI_TransmitReceive+0x2c6>
 80019b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b6:	d102      	bne.n	80019be <HAL_SPI_TransmitReceive+0x2cc>
 80019b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d103      	bne.n	80019c6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80019c4:	e027      	b.n	8001a16 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1a2      	bne.n	8001916 <HAL_SPI_TransmitReceive+0x224>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d19d      	bne.n	8001916 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80019da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 f892 	bl	8001b08 <SPI_EndRxTxTransaction>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d006      	beq.n	80019f8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2220      	movs	r2, #32
 80019f4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80019f6:	e00e      	b.n	8001a16 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10a      	bne.n	8001a16 <HAL_SPI_TransmitReceive+0x324>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001a26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3730      	adds	r7, #48	; 0x30
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	603b      	str	r3, [r7, #0]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001a42:	e04c      	b.n	8001ade <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4a:	d048      	beq.n	8001ade <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001a4c:	f7fe fdfa 	bl	8000644 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	1ad2      	subs	r2, r2, r3
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d202      	bcs.n	8001a62 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d13d      	bne.n	8001ade <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	6852      	ldr	r2, [r2, #4]
 8001a6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001a70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a7a:	d111      	bne.n	8001aa0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a84:	d004      	beq.n	8001a90 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8e:	d107      	bne.n	8001aa0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aa8:	d10f      	bne.n	8001aca <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	6812      	ldr	r2, [r2, #0]
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ac8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e00f      	b.n	8001afe <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	bf0c      	ite	eq
 8001aee:	2301      	moveq	r3, #1
 8001af0:	2300      	movne	r3, #0
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	461a      	mov	r2, r3
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d1a3      	bne.n	8001a44 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001b14:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <SPI_EndRxTxTransaction+0x7c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a1b      	ldr	r2, [pc, #108]	; (8001b88 <SPI_EndRxTxTransaction+0x80>)
 8001b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1e:	0d5b      	lsrs	r3, r3, #21
 8001b20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b24:	fb02 f303 	mul.w	r3, r2, r3
 8001b28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b32:	d112      	bne.n	8001b5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2180      	movs	r1, #128	; 0x80
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7ff ff77 	bl	8001a32 <SPI_WaitFlagStateUntilTimeout>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d016      	beq.n	8001b78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4e:	f043 0220 	orr.w	r2, r3, #32
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e00f      	b.n	8001b7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00a      	beq.n	8001b76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b70:	2b80      	cmp	r3, #128	; 0x80
 8001b72:	d0f2      	beq.n	8001b5a <SPI_EndRxTxTransaction+0x52>
 8001b74:	e000      	b.n	8001b78 <SPI_EndRxTxTransaction+0x70>
        break;
 8001b76:	bf00      	nop
  }

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000008 	.word	0x20000008
 8001b88:	165e9f81 	.word	0x165e9f81

08001b8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b90:	f7fe fcf2 	bl	8000578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b94:	f000 f816 	bl	8001bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b98:	f000 f8b4 	bl	8001d04 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001b9c:	f000 f87c 	bl	8001c98 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET); //SPI CS UP
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	2108      	movs	r1, #8
 8001ba4:	4806      	ldr	r0, [pc, #24]	; (8001bc0 <main+0x34>)
 8001ba6:	f7fe fff9 	bl	8000b9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); //SPI CS UP
 8001baa:	2200      	movs	r2, #0
 8001bac:	2140      	movs	r1, #64	; 0x40
 8001bae:	4804      	ldr	r0, [pc, #16]	; (8001bc0 <main+0x34>)
 8001bb0:	f7fe fff4 	bl	8000b9c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(100);
 8001bb4:	2064      	movs	r0, #100	; 0x64
 8001bb6:	f7fe fd51 	bl	800065c <HAL_Delay>
	  BME280_Handler();
 8001bba:	f000 f8e5 	bl	8001d88 <BME280_Handler>
	  HAL_Delay(100);
 8001bbe:	e7f9      	b.n	8001bb4 <main+0x28>
 8001bc0:	40020000 	.word	0x40020000

08001bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b094      	sub	sp, #80	; 0x50
 8001bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bca:	f107 0320 	add.w	r3, r7, #32
 8001bce:	2230      	movs	r2, #48	; 0x30
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f001 f92e 	bl	8002e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd8:	f107 030c 	add.w	r3, r7, #12
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	4a28      	ldr	r2, [pc, #160]	; (8001c90 <SystemClock_Config+0xcc>)
 8001bee:	4b28      	ldr	r3, [pc, #160]	; (8001c90 <SystemClock_Config+0xcc>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf8:	4b25      	ldr	r3, [pc, #148]	; (8001c90 <SystemClock_Config+0xcc>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c04:	2300      	movs	r3, #0
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	4a22      	ldr	r2, [pc, #136]	; (8001c94 <SystemClock_Config+0xd0>)
 8001c0a:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <SystemClock_Config+0xd0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <SystemClock_Config+0xd0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c20:	2301      	movs	r3, #1
 8001c22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c24:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c34:	2304      	movs	r3, #4
 8001c36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001c38:	23a0      	movs	r3, #160	; 0xa0
 8001c3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c40:	2304      	movs	r3, #4
 8001c42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c44:	f107 0320 	add.w	r3, r7, #32
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe ffc1 	bl	8000bd0 <HAL_RCC_OscConfig>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c54:	f000 f8dc 	bl	8001e10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c58:	230f      	movs	r3, #15
 8001c5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c70:	f107 030c 	add.w	r3, r7, #12
 8001c74:	2105      	movs	r1, #5
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff f9ec 	bl	8001054 <HAL_RCC_ClockConfig>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c82:	f000 f8c5 	bl	8001e10 <Error_Handler>
  }
}
 8001c86:	bf00      	nop
 8001c88:	3750      	adds	r7, #80	; 0x50
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40007000 	.word	0x40007000

08001c98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c9c:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <MX_SPI1_Init+0x64>)
 8001c9e:	4a18      	ldr	r2, [pc, #96]	; (8001d00 <MX_SPI1_Init+0x68>)
 8001ca0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ca2:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <MX_SPI1_Init+0x64>)
 8001ca4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ca8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001caa:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <MX_SPI1_Init+0x64>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cb0:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <MX_SPI1_Init+0x64>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <MX_SPI1_Init+0x64>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <MX_SPI1_Init+0x64>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <MX_SPI1_Init+0x64>)
 8001cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cc8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <MX_SPI1_Init+0x64>)
 8001ccc:	2210      	movs	r2, #16
 8001cce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <MX_SPI1_Init+0x64>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <MX_SPI1_Init+0x64>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cdc:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <MX_SPI1_Init+0x64>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <MX_SPI1_Init+0x64>)
 8001ce4:	220a      	movs	r2, #10
 8001ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ce8:	4804      	ldr	r0, [pc, #16]	; (8001cfc <MX_SPI1_Init+0x64>)
 8001cea:	f7ff fb6d 	bl	80013c8 <HAL_SPI_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001cf4:	f000 f88c 	bl	8001e10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000044 	.word	0x20000044
 8001d00:	40013000 	.word	0x40013000

08001d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0a:	f107 030c 	add.w	r3, r7, #12
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
 8001d18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	4a18      	ldr	r2, [pc, #96]	; (8001d80 <MX_GPIO_Init+0x7c>)
 8001d20:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <MX_GPIO_Init+0x7c>)
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <MX_GPIO_Init+0x7c>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	4a11      	ldr	r2, [pc, #68]	; (8001d80 <MX_GPIO_Init+0x7c>)
 8001d3c:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <MX_GPIO_Init+0x7c>)
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <MX_GPIO_Init+0x7c>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2108      	movs	r1, #8
 8001d56:	480b      	ldr	r0, [pc, #44]	; (8001d84 <MX_GPIO_Init+0x80>)
 8001d58:	f7fe ff20 	bl	8000b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d60:	2301      	movs	r3, #1
 8001d62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	4619      	mov	r1, r3
 8001d72:	4804      	ldr	r0, [pc, #16]	; (8001d84 <MX_GPIO_Init+0x80>)
 8001d74:	f7fe fd78 	bl	8000868 <HAL_GPIO_Init>

}
 8001d78:	bf00      	nop
 8001d7a:	3720      	adds	r7, #32
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020000 	.word	0x40020000

08001d88 <BME280_Handler>:

/*
 *
 */
void BME280_Handler()
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af04      	add	r7, sp, #16
	static uint8_t ms = 0;


	BME280.statusBME = BME280_ERROR;
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <BME280_Handler+0x80>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	731a      	strb	r2, [r3, #12]

	switch (ms)
 8001d94:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <BME280_Handler+0x84>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <BME280_Handler+0x1a>
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d018      	beq.n	8001dd2 <BME280_Handler+0x4a>
		BME280.temp = BME280_ReadTemperature();
		BME280.pres = BME280_ReadPressure();
		BME280.humi = BME280_ReadHumidity();
	break;
	}
}
 8001da0:	e02e      	b.n	8001e00 <BME280_Handler+0x78>
		BME280.statusBME = BME280_Initial(BME280_STANDBY_MS_10,
 8001da2:	2364      	movs	r3, #100	; 0x64
 8001da4:	9302      	str	r3, [sp, #8]
 8001da6:	2303      	movs	r3, #3
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	2304      	movs	r3, #4
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2310      	movs	r3, #16
 8001db0:	2280      	movs	r2, #128	; 0x80
 8001db2:	210c      	movs	r1, #12
 8001db4:	20c0      	movs	r0, #192	; 0xc0
 8001db6:	f000 f9e1 	bl	800217c <BME280_Initial>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <BME280_Handler+0x80>)
 8001dc0:	731a      	strb	r2, [r3, #12]
		if(BME280.statusBME == BME280_OK) {ms = 1;}
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <BME280_Handler+0x80>)
 8001dc4:	7b1b      	ldrb	r3, [r3, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d119      	bne.n	8001dfe <BME280_Handler+0x76>
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <BME280_Handler+0x84>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	701a      	strb	r2, [r3, #0]
	break;
 8001dd0:	e015      	b.n	8001dfe <BME280_Handler+0x76>
		BME280.temp = BME280_ReadTemperature();
 8001dd2:	f000 fa7f 	bl	80022d4 <BME280_ReadTemperature>
 8001dd6:	eef0 7a40 	vmov.f32	s15, s0
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <BME280_Handler+0x80>)
 8001ddc:	edc3 7a00 	vstr	s15, [r3]
		BME280.pres = BME280_ReadPressure();
 8001de0:	f000 fada 	bl	8002398 <BME280_ReadPressure>
 8001de4:	eef0 7a40 	vmov.f32	s15, s0
 8001de8:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <BME280_Handler+0x80>)
 8001dea:	edc3 7a01 	vstr	s15, [r3, #4]
		BME280.humi = BME280_ReadHumidity();
 8001dee:	f000 fd15 	bl	800281c <BME280_ReadHumidity>
 8001df2:	eef0 7a40 	vmov.f32	s15, s0
 8001df6:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <BME280_Handler+0x80>)
 8001df8:	edc3 7a02 	vstr	s15, [r3, #8]
	break;
 8001dfc:	e000      	b.n	8001e00 <BME280_Handler+0x78>
	break;
 8001dfe:	bf00      	nop
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000034 	.word	0x20000034
 8001e0c:	20000028 	.word	0x20000028

08001e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	4a10      	ldr	r2, [pc, #64]	; (8001e6c <HAL_MspInit+0x4c>)
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <HAL_MspInit+0x4c>)
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e34:	6453      	str	r3, [r2, #68]	; 0x44
 8001e36:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <HAL_MspInit+0x4c>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	603b      	str	r3, [r7, #0]
 8001e46:	4a09      	ldr	r2, [pc, #36]	; (8001e6c <HAL_MspInit+0x4c>)
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <HAL_MspInit+0x4c>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e50:	6413      	str	r3, [r2, #64]	; 0x40
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_MspInit+0x4c>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800

08001e70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	; 0x28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a19      	ldr	r2, [pc, #100]	; (8001ef4 <HAL_SPI_MspInit+0x84>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d12b      	bne.n	8001eea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	4a18      	ldr	r2, [pc, #96]	; (8001ef8 <HAL_SPI_MspInit+0x88>)
 8001e98:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <HAL_SPI_MspInit+0x88>)
 8001e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <HAL_SPI_MspInit+0x88>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	4a11      	ldr	r2, [pc, #68]	; (8001ef8 <HAL_SPI_MspInit+0x88>)
 8001eb4:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <HAL_SPI_MspInit+0x88>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <HAL_SPI_MspInit+0x88>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001eca:	23e0      	movs	r3, #224	; 0xe0
 8001ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eda:	2305      	movs	r3, #5
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4805      	ldr	r0, [pc, #20]	; (8001efc <HAL_SPI_MspInit+0x8c>)
 8001ee6:	f7fe fcbf 	bl	8000868 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001eea:	bf00      	nop
 8001eec:	3728      	adds	r7, #40	; 0x28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40013000 	.word	0x40013000
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40020000 	.word	0x40020000

08001f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f12:	e7fe      	b.n	8001f12 <HardFault_Handler+0x4>

08001f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <MemManage_Handler+0x4>

08001f1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f1e:	e7fe      	b.n	8001f1e <BusFault_Handler+0x4>

08001f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <UsageFault_Handler+0x4>

08001f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f54:	f7fe fb62 	bl	800061c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <convert16BitData>:
#define LED_ON 				HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_SET)
#define LED_OFF 			HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_RESET)
#define LED_TGL 			HAL_GPIO_TogglePin(LED_GPIO_PORT, LED_PIN)
//------------------------------------------------
static inline uint16_t convert16BitData(uint16_t data)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	80fb      	strh	r3, [r7, #6]
	return ((((data)>>8)&0xff)|(((data)<<8)&0xff00));
 8001f66:	88fb      	ldrh	r3, [r7, #6]
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	b21a      	sxth	r2, r3
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	b21b      	sxth	r3, r3
 8001f74:	4313      	orrs	r3, r2
 8001f76:	b21b      	sxth	r3, r3
 8001f78:	b29b      	uxth	r3, r3
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <convert24BitData>:
//------------------------------------------------
static inline uint32_t convert24BitData(uint32_t data)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
	return ((((data)>>16)&0x000000ff)|((data)&0x0000ff00)|(((data)<<16)&0x00ff0000));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	0c1b      	lsrs	r3, r3, #16
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	041b      	lsls	r3, r3, #16
 8001fa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001fa4:	4313      	orrs	r3, r2
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <errorHandler>:
BME280_Settings BME280_Set;
int32_t tFineValue = 0;
//-------------------------------------------------------------------------------
//I2C Communication functions
static inline void errorHandler()
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0
	/* Error handler */
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <SPIx_CsDown>:

/*
 *
 */
static void SPIx_CsDown()
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2108      	movs	r1, #8
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <SPIx_CsDown+0x14>)
 8001fca:	f7fe fde7 	bl	8000b9c <HAL_GPIO_WritePin>
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40020000 	.word	0x40020000

08001fd8 <SPIx_CsUp>:

/*
 *
 */
static void SPIx_CsUp()
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001fdc:	2201      	movs	r2, #1
 8001fde:	2108      	movs	r1, #8
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <SPIx_CsUp+0x14>)
 8001fe2:	f7fe fddb 	bl	8000b9c <HAL_GPIO_WritePin>
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40020000 	.word	0x40020000

08001ff0 <SPIx_WriteData>:
/*
 *
 */
static inline void SPIx_WriteData(uint8_t Reg, uint8_t Value)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	460a      	mov	r2, r1
 8001ffa:	71fb      	strb	r3, [r7, #7]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef operationStatus = HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	73fb      	strb	r3, [r7, #15]

  uint8_t writeData[2] = {Reg & 0x7F, Value};
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800200a:	b2db      	uxtb	r3, r3
 800200c:	733b      	strb	r3, [r7, #12]
 800200e:	79bb      	ldrb	r3, [r7, #6]
 8002010:	737b      	strb	r3, [r7, #13]

  //operationStatus = HAL_I2C_Mem_Write(&hi2c2, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
  SPIx_CsDown();
 8002012:	f7ff ffd5 	bl	8001fc0 <SPIx_CsDown>
  operationStatus = HAL_SPI_Transmit(&hspi1, writeData, 2, 10);
 8002016:	f107 010c 	add.w	r1, r7, #12
 800201a:	230a      	movs	r3, #10
 800201c:	2202      	movs	r2, #2
 800201e:	4808      	ldr	r0, [pc, #32]	; (8002040 <SPIx_WriteData+0x50>)
 8002020:	f7ff fa35 	bl	800148e <HAL_SPI_Transmit>
 8002024:	4603      	mov	r3, r0
 8002026:	73fb      	strb	r3, [r7, #15]
  SPIx_CsUp();
 8002028:	f7ff ffd6 	bl	8001fd8 <SPIx_CsUp>

  if(operationStatus != HAL_OK)
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <SPIx_WriteData+0x46>
  {
	  errorHandler();
 8002032:	f7ff ffbe 	bl	8001fb2 <errorHandler>
  }
}
 8002036:	bf00      	nop
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000044 	.word	0x20000044

08002044 <SPIx_ReadData>:

/*
 *
 */
static inline uint8_t SPIx_ReadData(uint8_t Reg)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af02      	add	r7, sp, #8
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
  uint8_t writeData[2] = {Reg, 0};
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	733b      	strb	r3, [r7, #12]
 8002056:	2300      	movs	r3, #0
 8002058:	737b      	strb	r3, [r7, #13]
  uint8_t readData[2] = {0};
 800205a:	2300      	movs	r3, #0
 800205c:	813b      	strh	r3, [r7, #8]

  //uint8_t readedValue = 0;

  //status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &readedValue, 1, 0x10000);
  SPIx_CsDown();
 800205e:	f7ff ffaf 	bl	8001fc0 <SPIx_CsDown>
  status = HAL_SPI_TransmitReceive(&hspi1, writeData, readData, 2, 10);
 8002062:	f107 0208 	add.w	r2, r7, #8
 8002066:	f107 010c 	add.w	r1, r7, #12
 800206a:	230a      	movs	r3, #10
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	2302      	movs	r3, #2
 8002070:	4808      	ldr	r0, [pc, #32]	; (8002094 <SPIx_ReadData+0x50>)
 8002072:	f7ff fb3e 	bl	80016f2 <HAL_SPI_TransmitReceive>
 8002076:	4603      	mov	r3, r0
 8002078:	73fb      	strb	r3, [r7, #15]
  SPIx_CsUp();
 800207a:	f7ff ffad 	bl	8001fd8 <SPIx_CsUp>

  if(status != HAL_OK)
 800207e:	7bfb      	ldrb	r3, [r7, #15]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <SPIx_ReadData+0x44>
  {
	  errorHandler();
 8002084:	f7ff ff95 	bl	8001fb2 <errorHandler>
  }
  return readData[1];
 8002088:	7a7b      	ldrb	r3, [r7, #9]
  //return readedValue;
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000044 	.word	0x20000044

08002098 <SPIx_ReadData16>:

/*
 *
 */
static void SPIx_ReadData16(uint8_t Reg, uint16_t *Value)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af02      	add	r7, sp, #8
 800209e:	4603      	mov	r3, r0
 80020a0:	6039      	str	r1, [r7, #0]
 80020a2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
  uint8_t writeData[3] = {Reg, 0, 0};
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	733b      	strb	r3, [r7, #12]
 80020ac:	2300      	movs	r3, #0
 80020ae:	737b      	strb	r3, [r7, #13]
 80020b0:	2300      	movs	r3, #0
 80020b2:	73bb      	strb	r3, [r7, #14]
  uint8_t readData[3] = {0};
 80020b4:	f107 0308 	add.w	r3, r7, #8
 80020b8:	2100      	movs	r1, #0
 80020ba:	460a      	mov	r2, r1
 80020bc:	801a      	strh	r2, [r3, #0]
 80020be:	460a      	mov	r2, r1
 80020c0:	709a      	strb	r2, [r3, #2]

  //status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
  SPIx_CsDown();
 80020c2:	f7ff ff7d 	bl	8001fc0 <SPIx_CsDown>
  status = HAL_SPI_TransmitReceive(&hspi1, writeData, readData, 3, 10);
 80020c6:	f107 0208 	add.w	r2, r7, #8
 80020ca:	f107 010c 	add.w	r1, r7, #12
 80020ce:	230a      	movs	r3, #10
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	2303      	movs	r3, #3
 80020d4:	480c      	ldr	r0, [pc, #48]	; (8002108 <SPIx_ReadData16+0x70>)
 80020d6:	f7ff fb0c 	bl	80016f2 <HAL_SPI_TransmitReceive>
 80020da:	4603      	mov	r3, r0
 80020dc:	73fb      	strb	r3, [r7, #15]
  SPIx_CsUp();
 80020de:	f7ff ff7b 	bl	8001fd8 <SPIx_CsUp>

  if(status != HAL_OK)
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <SPIx_ReadData16+0x54>
  {
	  errorHandler();
 80020e8:	f7ff ff63 	bl	8001fb2 <errorHandler>
  }

  //Value = (uint16_t*)&readData[1];
  *Value = readData[2]<<8 | readData[1];
 80020ec:	7abb      	ldrb	r3, [r7, #10]
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	b21a      	sxth	r2, r3
 80020f2:	7a7b      	ldrb	r3, [r7, #9]
 80020f4:	b21b      	sxth	r3, r3
 80020f6:	4313      	orrs	r3, r2
 80020f8:	b21b      	sxth	r3, r3
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	801a      	strh	r2, [r3, #0]
}
 8002100:	bf00      	nop
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000044 	.word	0x20000044

0800210c <SPIx_ReadData24>:

/*
 *
 */
static void SPIx_ReadData24(uint8_t Reg, uint32_t *Value)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af02      	add	r7, sp, #8
 8002112:	4603      	mov	r3, r0
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	75fb      	strb	r3, [r7, #23]
  uint8_t writeData[4] = {Reg, 0, 0, 0};
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	743b      	strb	r3, [r7, #16]
 8002120:	2300      	movs	r3, #0
 8002122:	747b      	strb	r3, [r7, #17]
 8002124:	2300      	movs	r3, #0
 8002126:	74bb      	strb	r3, [r7, #18]
 8002128:	2300      	movs	r3, #0
 800212a:	74fb      	strb	r3, [r7, #19]
  uint8_t readData[4] = {0};
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]

  //status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
  SPIx_CsDown();
 8002130:	f7ff ff46 	bl	8001fc0 <SPIx_CsDown>
  status = HAL_SPI_TransmitReceive(&hspi1, writeData, readData, 4, 10);
 8002134:	f107 020c 	add.w	r2, r7, #12
 8002138:	f107 0110 	add.w	r1, r7, #16
 800213c:	230a      	movs	r3, #10
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2304      	movs	r3, #4
 8002142:	480d      	ldr	r0, [pc, #52]	; (8002178 <SPIx_ReadData24+0x6c>)
 8002144:	f7ff fad5 	bl	80016f2 <HAL_SPI_TransmitReceive>
 8002148:	4603      	mov	r3, r0
 800214a:	75fb      	strb	r3, [r7, #23]
  SPIx_CsUp();
 800214c:	f7ff ff44 	bl	8001fd8 <SPIx_CsUp>

  if(status != HAL_OK)
 8002150:	7dfb      	ldrb	r3, [r7, #23]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <SPIx_ReadData24+0x4e>
  {
	  errorHandler();
 8002156:	f7ff ff2c 	bl	8001fb2 <errorHandler>
  }
  //Value = (uint32_t*)&readData[1];
  *Value = readData[3]<<16 | readData[2]<<8 | readData[1];
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	041a      	lsls	r2, r3, #16
 800215e:	7bbb      	ldrb	r3, [r7, #14]
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	4313      	orrs	r3, r2
 8002164:	7b7a      	ldrb	r2, [r7, #13]
 8002166:	4313      	orrs	r3, r2
 8002168:	461a      	mov	r2, r3
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	601a      	str	r2, [r3, #0]
}
 800216e:	bf00      	nop
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000044 	.word	0x20000044

0800217c <BME280_Initial>:
static void bme280_SetMode(BME280_mode_E mode);
//-------------------------------------------------------------------------------
BME280_status BME280_Initial(BME280_standby_Time_E standbyTime, BME280_filter_E filter,
					BME280_overSamplingTemp_E tempOversampl, BME280_overSamplingPres_E presOversampl,
					BME280_overSamplingHum_E humOversampl, BME280_mode_E sensMode, uint16_t timeout)
{
 800217c:	b590      	push	{r4, r7, lr}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	4604      	mov	r4, r0
 8002184:	4608      	mov	r0, r1
 8002186:	4611      	mov	r1, r2
 8002188:	461a      	mov	r2, r3
 800218a:	4623      	mov	r3, r4
 800218c:	71fb      	strb	r3, [r7, #7]
 800218e:	4603      	mov	r3, r0
 8002190:	71bb      	strb	r3, [r7, #6]
 8002192:	460b      	mov	r3, r1
 8002194:	717b      	strb	r3, [r7, #5]
 8002196:	4613      	mov	r3, r2
 8002198:	713b      	strb	r3, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 800219a:	f7fe fa53 	bl	8000644 <HAL_GetTick>
 800219e:	60f8      	str	r0, [r7, #12]

	BME280_Set.sensorID = bme280_ReadReg(BME280_REG_ID);
 80021a0:	20d0      	movs	r0, #208	; 0xd0
 80021a2:	f000 fbd5 	bl	8002950 <bme280_ReadReg>
 80021a6:	4603      	mov	r3, r0
 80021a8:	461a      	mov	r2, r3
 80021aa:	4b49      	ldr	r3, [pc, #292]	; (80022d0 <BME280_Initial+0x154>)
 80021ac:	701a      	strb	r2, [r3, #0]

	if(BME280_Set.sensorID != BME280_ID)
 80021ae:	4b48      	ldr	r3, [pc, #288]	; (80022d0 <BME280_Initial+0x154>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b60      	cmp	r3, #96	; 0x60
 80021b4:	d003      	beq.n	80021be <BME280_Initial+0x42>
	{
		errorHandler();
 80021b6:	f7ff fefc 	bl	8001fb2 <errorHandler>
		return BME280_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e084      	b.n	80022c8 <BME280_Initial+0x14c>
	}

	BME280_Set.standbyTime = standbyTime;
 80021be:	4a44      	ldr	r2, [pc, #272]	; (80022d0 <BME280_Initial+0x154>)
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	7053      	strb	r3, [r2, #1]
	BME280_Set.filter = filter;
 80021c4:	4a42      	ldr	r2, [pc, #264]	; (80022d0 <BME280_Initial+0x154>)
 80021c6:	79bb      	ldrb	r3, [r7, #6]
 80021c8:	7093      	strb	r3, [r2, #2]
	BME280_Set.tempOversampl = tempOversampl;
 80021ca:	4a41      	ldr	r2, [pc, #260]	; (80022d0 <BME280_Initial+0x154>)
 80021cc:	797b      	ldrb	r3, [r7, #5]
 80021ce:	70d3      	strb	r3, [r2, #3]
	BME280_Set.presOversampl = presOversampl;
 80021d0:	4a3f      	ldr	r2, [pc, #252]	; (80022d0 <BME280_Initial+0x154>)
 80021d2:	793b      	ldrb	r3, [r7, #4]
 80021d4:	7113      	strb	r3, [r2, #4]
	BME280_Set.humOversampl = humOversampl;
 80021d6:	4a3e      	ldr	r2, [pc, #248]	; (80022d0 <BME280_Initial+0x154>)
 80021d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021dc:	7153      	strb	r3, [r2, #5]
	BME280_Set.sensMode = sensMode;
 80021de:	4a3c      	ldr	r2, [pc, #240]	; (80022d0 <BME280_Initial+0x154>)
 80021e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80021e4:	7193      	strb	r3, [r2, #6]

	bme280_WriteReg(BME280_REG_SOFTRESET, BME280_SOFTRESET_VALUE);
 80021e6:	21b6      	movs	r1, #182	; 0xb6
 80021e8:	20e0      	movs	r0, #224	; 0xe0
 80021ea:	f000 fb9f 	bl	800292c <bme280_WriteReg>

	while (bme280_ReadStatus() & BME280_STATUS_IM_UPDATE)
 80021ee:	e009      	b.n	8002204 <BME280_Initial+0x88>
	{
		if(HAL_GetTick() - tickstart > timeout)
 80021f0:	f7fe fa28 	bl	8000644 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1ad2      	subs	r2, r2, r3
 80021fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d901      	bls.n	8002204 <BME280_Initial+0x88>
			return BME280_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e061      	b.n	80022c8 <BME280_Initial+0x14c>
	while (bme280_ReadStatus() & BME280_STATUS_IM_UPDATE)
 8002204:	f000 fbc6 	bl	8002994 <bme280_ReadStatus>
 8002208:	4603      	mov	r3, r0
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1ee      	bne.n	80021f0 <BME280_Initial+0x74>
	}

	bme280_ReadCoefficients();
 8002212:	f000 fcb1 	bl	8002b78 <bme280_ReadCoefficients>

	bme280_SetStandby(BME280_Set.standbyTime);
 8002216:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <BME280_Initial+0x154>)
 8002218:	785b      	ldrb	r3, [r3, #1]
 800221a:	4618      	mov	r0, r3
 800221c:	f000 fcb6 	bl	8002b8c <bme280_SetStandby>
	bme280_SetFilter(BME280_Set.filter);
 8002220:	4b2b      	ldr	r3, [pc, #172]	; (80022d0 <BME280_Initial+0x154>)
 8002222:	789b      	ldrb	r3, [r3, #2]
 8002224:	4618      	mov	r0, r3
 8002226:	f000 fcd2 	bl	8002bce <bme280_SetFilter>

	bme280_SetOversamplingTemper(BME280_Set.tempOversampl);
 800222a:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <BME280_Initial+0x154>)
 800222c:	78db      	ldrb	r3, [r3, #3]
 800222e:	4618      	mov	r0, r3
 8002230:	f000 fcee 	bl	8002c10 <bme280_SetOversamplingTemper>
	bme280_SetOversamplingPressure(BME280_Set.presOversampl);
 8002234:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <BME280_Initial+0x154>)
 8002236:	791b      	ldrb	r3, [r3, #4]
 8002238:	4618      	mov	r0, r3
 800223a:	f000 fd0a 	bl	8002c52 <bme280_SetOversamplingPressure>
	bme280_SetOversamplingHum(BME280_Set.humOversampl);
 800223e:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <BME280_Initial+0x154>)
 8002240:	795b      	ldrb	r3, [r3, #5]
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fd26 	bl	8002c94 <bme280_SetOversamplingHum>

	BME280_Set.measurementStatus = bme280_ReadReg(BME280_REG_CTRL_MEAS);
 8002248:	20f4      	movs	r0, #244	; 0xf4
 800224a:	f000 fb81 	bl	8002950 <bme280_ReadReg>
 800224e:	4603      	mov	r3, r0
 8002250:	461a      	mov	r2, r3
 8002252:	4b1f      	ldr	r3, [pc, #124]	; (80022d0 <BME280_Initial+0x154>)
 8002254:	609a      	str	r2, [r3, #8]
	BME280_Set.measurementStatus = bme280_ReadReg(BME280_REG_CTRL_HUM) << 8;
 8002256:	20f2      	movs	r0, #242	; 0xf2
 8002258:	f000 fb7a 	bl	8002950 <bme280_ReadReg>
 800225c:	4603      	mov	r3, r0
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	461a      	mov	r2, r3
 8002262:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <BME280_Initial+0x154>)
 8002264:	609a      	str	r2, [r3, #8]

	BME280_Set.tempOn = (BME280_Set.measurementStatus & BME280_OSRS_T_MSK) ? 1 : 0;
 8002266:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <BME280_Initial+0x154>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800226e:	2b00      	cmp	r3, #0
 8002270:	bf14      	ite	ne
 8002272:	2301      	movne	r3, #1
 8002274:	2300      	moveq	r3, #0
 8002276:	b2d9      	uxtb	r1, r3
 8002278:	4a15      	ldr	r2, [pc, #84]	; (80022d0 <BME280_Initial+0x154>)
 800227a:	7b13      	ldrb	r3, [r2, #12]
 800227c:	f361 0300 	bfi	r3, r1, #0, #1
 8002280:	7313      	strb	r3, [r2, #12]
	BME280_Set.presOn = (BME280_Set.measurementStatus & BME280_OSRS_P_MSK) ? 1 : 0;
 8002282:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <BME280_Initial+0x154>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 031c 	and.w	r3, r3, #28
 800228a:	2b00      	cmp	r3, #0
 800228c:	bf14      	ite	ne
 800228e:	2301      	movne	r3, #1
 8002290:	2300      	moveq	r3, #0
 8002292:	b2d9      	uxtb	r1, r3
 8002294:	4a0e      	ldr	r2, [pc, #56]	; (80022d0 <BME280_Initial+0x154>)
 8002296:	7b13      	ldrb	r3, [r2, #12]
 8002298:	f361 0341 	bfi	r3, r1, #1, #1
 800229c:	7313      	strb	r3, [r2, #12]
	BME280_Set.humiOn = ((BME280_Set.measurementStatus >> 8) & BME280_OSRS_H_MSK) ? 1 : 0;
 800229e:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <BME280_Initial+0x154>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	0a1b      	lsrs	r3, r3, #8
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	bf14      	ite	ne
 80022ac:	2301      	movne	r3, #1
 80022ae:	2300      	moveq	r3, #0
 80022b0:	b2d9      	uxtb	r1, r3
 80022b2:	4a07      	ldr	r2, [pc, #28]	; (80022d0 <BME280_Initial+0x154>)
 80022b4:	7b13      	ldrb	r3, [r2, #12]
 80022b6:	f361 0382 	bfi	r3, r1, #2, #1
 80022ba:	7313      	strb	r3, [r2, #12]

	bme280_SetMode(BME280_Set.sensMode);
 80022bc:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <BME280_Initial+0x154>)
 80022be:	799b      	ldrb	r3, [r3, #6]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 fd12 	bl	8002cea <bme280_SetMode>

	return BME280_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd90      	pop	{r4, r7, pc}
 80022d0:	200000c0 	.word	0x200000c0

080022d4 <BME280_ReadTemperature>:


float BME280_ReadTemperature(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
	float readTemp = 0.0f;
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
	uint32_t readRawData = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	603b      	str	r3, [r7, #0]

	bme280_ReadRegDataConvert24(BME280_REGISTER_TEMPDATA, &readRawData);
 80022e4:	463b      	mov	r3, r7
 80022e6:	4619      	mov	r1, r3
 80022e8:	20fa      	movs	r0, #250	; 0xfa
 80022ea:	f000 fb98 	bl	8002a1e <bme280_ReadRegDataConvert24>

	if(readRawData == 0x800000)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022f4:	d101      	bne.n	80022fa <BME280_ReadTemperature+0x26>
	{
		return 0xFFFF;
 80022f6:	4b24      	ldr	r3, [pc, #144]	; (8002388 <BME280_ReadTemperature+0xb4>)
 80022f8:	e03e      	b.n	8002378 <BME280_ReadTemperature+0xa4>
	}

	readRawData >>= 4;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	603b      	str	r3, [r7, #0]

	int32_t tmp_1 = ((((readRawData>>3) - ((int32_t)CalibData.tempValue.dig_T1 <<1))) *
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	08db      	lsrs	r3, r3, #3
 8002304:	4a21      	ldr	r2, [pc, #132]	; (800238c <BME280_ReadTemperature+0xb8>)
 8002306:	8812      	ldrh	r2, [r2, #0]
 8002308:	0052      	lsls	r2, r2, #1
 800230a:	1a9b      	subs	r3, r3, r2
		((int32_t)CalibData.tempValue.dig_T2)) >> 11;
 800230c:	4a1f      	ldr	r2, [pc, #124]	; (800238c <BME280_ReadTemperature+0xb8>)
 800230e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
	int32_t tmp_1 = ((((readRawData>>3) - ((int32_t)CalibData.tempValue.dig_T1 <<1))) *
 8002312:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.tempValue.dig_T2)) >> 11;
 8002316:	0adb      	lsrs	r3, r3, #11
	int32_t tmp_1 = ((((readRawData>>3) - ((int32_t)CalibData.tempValue.dig_T1 <<1))) *
 8002318:	60bb      	str	r3, [r7, #8]

	int32_t tmp_2 = (((((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1)) *
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	4a1b      	ldr	r2, [pc, #108]	; (800238c <BME280_ReadTemperature+0xb8>)
 8002320:	8812      	ldrh	r2, [r2, #0]
 8002322:	1a9b      	subs	r3, r3, r2
		((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1))) >> 12) *
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	0912      	lsrs	r2, r2, #4
 8002328:	4918      	ldr	r1, [pc, #96]	; (800238c <BME280_ReadTemperature+0xb8>)
 800232a:	8809      	ldrh	r1, [r1, #0]
 800232c:	1a52      	subs	r2, r2, r1
	int32_t tmp_2 = (((((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1)) *
 800232e:	fb02 f303 	mul.w	r3, r2, r3
		((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1))) >> 12) *
 8002332:	0b1b      	lsrs	r3, r3, #12
		((int32_t)CalibData.tempValue.dig_T3)) >> 14;
 8002334:	4a15      	ldr	r2, [pc, #84]	; (800238c <BME280_ReadTemperature+0xb8>)
 8002336:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1))) >> 12) *
 800233a:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.tempValue.dig_T3)) >> 14;
 800233e:	0b9b      	lsrs	r3, r3, #14
	int32_t tmp_2 = (((((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1)) *
 8002340:	607b      	str	r3, [r7, #4]

	tFineValue = tmp_1 + tmp_2;
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	4a11      	ldr	r2, [pc, #68]	; (8002390 <BME280_ReadTemperature+0xbc>)
 800234a:	6013      	str	r3, [r2, #0]
	readTemp = ((tFineValue * 5 + 128) >> 8);
 800234c:	4b10      	ldr	r3, [pc, #64]	; (8002390 <BME280_ReadTemperature+0xbc>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	3380      	adds	r3, #128	; 0x80
 8002358:	121b      	asrs	r3, r3, #8
 800235a:	ee07 3a90 	vmov	s15, r3
 800235e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002362:	edc7 7a03 	vstr	s15, [r7, #12]
	readTemp /= 100.0f;
 8002366:	ed97 7a03 	vldr	s14, [r7, #12]
 800236a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002394 <BME280_ReadTemperature+0xc0>
 800236e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002372:	edc7 7a03 	vstr	s15, [r7, #12]

	return readTemp;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	ee07 3a90 	vmov	s15, r3
}
 800237c:	eeb0 0a67 	vmov.f32	s0, s15
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	477fff00 	.word	0x477fff00
 800238c:	2000009c 	.word	0x2000009c
 8002390:	2000002c 	.word	0x2000002c
 8002394:	42c80000 	.word	0x42c80000

08002398 <BME280_ReadPressure>:


float BME280_ReadPressure(void)
{
 8002398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800239c:	b0a8      	sub	sp, #160	; 0xa0
 800239e:	af00      	add	r7, sp, #0
	float pressFloat = 0.0f;
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	int64_t presureInt = 0;
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	f04f 0400 	mov.w	r4, #0
 80023b0:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	uint32_t presureRaw = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	677b      	str	r3, [r7, #116]	; 0x74
	uint32_t presUint = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	int64_t tmp_1 = 0;
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	f04f 0400 	mov.w	r4, #0
 80023c6:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	int64_t tmp_2 = 0;
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	f04f 0400 	mov.w	r4, #0
 80023d2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78

	BME280_ReadTemperature();
 80023d6:	f7ff ff7d 	bl	80022d4 <BME280_ReadTemperature>
	bme280_ReadRegDataConvert24(BME280_REGISTER_PRESSUREDATA, &presureRaw);
 80023da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023de:	4619      	mov	r1, r3
 80023e0:	20f7      	movs	r0, #247	; 0xf7
 80023e2:	f000 fb1c 	bl	8002a1e <bme280_ReadRegDataConvert24>

    if (presureRaw == 0x800000)
 80023e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023ec:	d101      	bne.n	80023f2 <BME280_ReadPressure+0x5a>
    {
    	return 0xFFFF;
 80023ee:	4b70      	ldr	r3, [pc, #448]	; (80025b0 <BME280_ReadPressure+0x218>)
 80023f0:	e204      	b.n	80027fc <BME280_ReadPressure+0x464>
    }

    presureRaw >>= 4;
 80023f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023f4:	091b      	lsrs	r3, r3, #4
 80023f6:	677b      	str	r3, [r7, #116]	; 0x74

    tmp_1 = ((int64_t) tFineValue) - 128000;
 80023f8:	4b6e      	ldr	r3, [pc, #440]	; (80025b4 <BME280_ReadPressure+0x21c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002400:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8002404:	f144 34ff 	adc.w	r4, r4, #4294967295
 8002408:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    tmp_2 = tmp_1 * tmp_1 * (int64_t)CalibData.presureValue.dig_P6;
 800240c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002410:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002414:	fb03 f102 	mul.w	r1, r3, r2
 8002418:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800241c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002420:	fb03 f302 	mul.w	r3, r3, r2
 8002424:	18cc      	adds	r4, r1, r3
 8002426:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800242a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800242e:	fba2 0103 	umull	r0, r1, r2, r3
 8002432:	1863      	adds	r3, r4, r1
 8002434:	4619      	mov	r1, r3
 8002436:	4b60      	ldr	r3, [pc, #384]	; (80025b8 <BME280_ReadPressure+0x220>)
 8002438:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800243c:	b21b      	sxth	r3, r3
 800243e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002442:	fb03 f501 	mul.w	r5, r3, r1
 8002446:	fb00 f204 	mul.w	r2, r0, r4
 800244a:	442a      	add	r2, r5
 800244c:	fba0 3403 	umull	r3, r4, r0, r3
 8002450:	4422      	add	r2, r4
 8002452:	4614      	mov	r4, r2
 8002454:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8002458:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    tmp_2 = tmp_2 + ((tmp_1 * (int64_t)CalibData.presureValue.dig_P5) << 17);
 800245c:	4b56      	ldr	r3, [pc, #344]	; (80025b8 <BME280_ReadPressure+0x220>)
 800245e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002462:	b21b      	sxth	r3, r3
 8002464:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002468:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800246c:	fb04 f102 	mul.w	r1, r4, r2
 8002470:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002474:	fb03 f202 	mul.w	r2, r3, r2
 8002478:	4411      	add	r1, r2
 800247a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800247e:	fba2 3403 	umull	r3, r4, r2, r3
 8002482:	190a      	adds	r2, r1, r4
 8002484:	4614      	mov	r4, r2
 8002486:	ea4f 4944 	mov.w	r9, r4, lsl #17
 800248a:	ea49 39d3 	orr.w	r9, r9, r3, lsr #15
 800248e:	ea4f 4843 	mov.w	r8, r3, lsl #17
 8002492:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002496:	eb13 0308 	adds.w	r3, r3, r8
 800249a:	eb44 0409 	adc.w	r4, r4, r9
 800249e:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    tmp_2 = tmp_2 + ((int64_t)CalibData.presureValue.dig_P4 << 35);
 80024a2:	4b45      	ldr	r3, [pc, #276]	; (80025b8 <BME280_ReadPressure+0x220>)
 80024a4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80024a8:	b21b      	sxth	r3, r3
 80024aa:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80024ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80024be:	18c9      	adds	r1, r1, r3
 80024c0:	eb42 0204 	adc.w	r2, r2, r4
 80024c4:	460b      	mov	r3, r1
 80024c6:	4614      	mov	r4, r2
 80024c8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	tmp_1 = ((tmp_1 * tmp_1 * (int64_t)CalibData.presureValue.dig_P3) >> 8) + ((tmp_1 * (int64_t)CalibData.presureValue.dig_P2) << 12);
 80024cc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80024d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024d4:	fb03 f102 	mul.w	r1, r3, r2
 80024d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80024dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024e0:	fb03 f302 	mul.w	r3, r3, r2
 80024e4:	18cc      	adds	r4, r1, r3
 80024e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80024ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024ee:	fba2 0103 	umull	r0, r1, r2, r3
 80024f2:	1863      	adds	r3, r4, r1
 80024f4:	4619      	mov	r1, r3
 80024f6:	4b30      	ldr	r3, [pc, #192]	; (80025b8 <BME280_ReadPressure+0x220>)
 80024f8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80024fc:	b21b      	sxth	r3, r3
 80024fe:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002502:	fb03 f501 	mul.w	r5, r3, r1
 8002506:	fb00 f204 	mul.w	r2, r0, r4
 800250a:	442a      	add	r2, r5
 800250c:	fba0 3403 	umull	r3, r4, r0, r3
 8002510:	4422      	add	r2, r4
 8002512:	4614      	mov	r4, r2
 8002514:	0a1a      	lsrs	r2, r3, #8
 8002516:	66ba      	str	r2, [r7, #104]	; 0x68
 8002518:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800251a:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 800251e:	66ba      	str	r2, [r7, #104]	; 0x68
 8002520:	1223      	asrs	r3, r4, #8
 8002522:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002524:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <BME280_ReadPressure+0x220>)
 8002526:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800252a:	b21b      	sxth	r3, r3
 800252c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002530:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002534:	fb04 f102 	mul.w	r1, r4, r2
 8002538:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800253c:	fb03 f202 	mul.w	r2, r3, r2
 8002540:	4411      	add	r1, r2
 8002542:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002546:	fba2 3403 	umull	r3, r4, r2, r3
 800254a:	190a      	adds	r2, r1, r4
 800254c:	4614      	mov	r4, r2
 800254e:	ea4f 3b04 	mov.w	fp, r4, lsl #12
 8002552:	ea4b 5b13 	orr.w	fp, fp, r3, lsr #20
 8002556:	ea4f 3a03 	mov.w	sl, r3, lsl #12
 800255a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800255e:	eb13 030a 	adds.w	r3, r3, sl
 8002562:	eb44 040b 	adc.w	r4, r4, fp
 8002566:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	tmp_1 = (((((int64_t)1) << 47) + tmp_1)) * ((int64_t)CalibData.presureValue.dig_P1) >> 33;
 800256a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800256e:	1c19      	adds	r1, r3, #0
 8002570:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8002574:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <BME280_ReadPressure+0x220>)
 8002576:	88db      	ldrh	r3, [r3, #6]
 8002578:	b29b      	uxth	r3, r3
 800257a:	f04f 0400 	mov.w	r4, #0
 800257e:	fb03 f502 	mul.w	r5, r3, r2
 8002582:	fb01 f004 	mul.w	r0, r1, r4
 8002586:	4428      	add	r0, r5
 8002588:	fba1 3403 	umull	r3, r4, r1, r3
 800258c:	1902      	adds	r2, r0, r4
 800258e:	4614      	mov	r4, r2
 8002590:	1062      	asrs	r2, r4, #1
 8002592:	603a      	str	r2, [r7, #0]
 8002594:	17e3      	asrs	r3, r4, #31
 8002596:	607b      	str	r3, [r7, #4]
 8002598:	e897 0018 	ldmia.w	r7, {r3, r4}
 800259c:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80

	if (tmp_1 == 0) {
 80025a0:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80025a4:	4323      	orrs	r3, r4
 80025a6:	d109      	bne.n	80025bc <BME280_ReadPressure+0x224>
		return 0;
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	e126      	b.n	80027fc <BME280_ReadPressure+0x464>
 80025ae:	bf00      	nop
 80025b0:	477fff00 	.word	0x477fff00
 80025b4:	2000002c 	.word	0x2000002c
 80025b8:	2000009c 	.word	0x2000009c
	}

	presureInt = 1048576 - presureRaw;
 80025bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025be:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80025c2:	f04f 0400 	mov.w	r4, #0
 80025c6:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	presureInt = (((presureInt << 31) - tmp_2) * 3125) / tmp_1;
 80025ca:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80025ce:	07e2      	lsls	r2, r4, #31
 80025d0:	667a      	str	r2, [r7, #100]	; 0x64
 80025d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80025d4:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 80025d8:	667a      	str	r2, [r7, #100]	; 0x64
 80025da:	07db      	lsls	r3, r3, #31
 80025dc:	663b      	str	r3, [r7, #96]	; 0x60
 80025de:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80025e2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80025e6:	1ac9      	subs	r1, r1, r3
 80025e8:	eb62 0204 	sbc.w	r2, r2, r4
 80025ec:	460b      	mov	r3, r1
 80025ee:	4614      	mov	r4, r2
 80025f0:	18db      	adds	r3, r3, r3
 80025f2:	eb44 0404 	adc.w	r4, r4, r4
 80025f6:	185b      	adds	r3, r3, r1
 80025f8:	eb44 0402 	adc.w	r4, r4, r2
 80025fc:	01a0      	lsls	r0, r4, #6
 80025fe:	6378      	str	r0, [r7, #52]	; 0x34
 8002600:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002602:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 8002606:	6378      	str	r0, [r7, #52]	; 0x34
 8002608:	0198      	lsls	r0, r3, #6
 800260a:	6338      	str	r0, [r7, #48]	; 0x30
 800260c:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8002610:	eb18 0803 	adds.w	r8, r8, r3
 8002614:	eb49 0904 	adc.w	r9, r9, r4
 8002618:	4643      	mov	r3, r8
 800261a:	464c      	mov	r4, r9
 800261c:	00a0      	lsls	r0, r4, #2
 800261e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002620:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002622:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
 8002626:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
 800262c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002630:	185b      	adds	r3, r3, r1
 8002632:	eb44 0402 	adc.w	r4, r4, r2
 8002636:	00a0      	lsls	r0, r4, #2
 8002638:	6278      	str	r0, [r7, #36]	; 0x24
 800263a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800263c:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
 8002640:	6278      	str	r0, [r7, #36]	; 0x24
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	623b      	str	r3, [r7, #32]
 8002646:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800264a:	eb13 0801 	adds.w	r8, r3, r1
 800264e:	eb44 0902 	adc.w	r9, r4, r2
 8002652:	4640      	mov	r0, r8
 8002654:	4649      	mov	r1, r9
 8002656:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800265a:	f7fd fdb5 	bl	80001c8 <__aeabi_ldivmod>
 800265e:	4603      	mov	r3, r0
 8002660:	460c      	mov	r4, r1
 8002662:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90

	tmp_1 = (((int64_t)CalibData.presureValue.dig_P9) * (presureInt >> 13) * (presureInt >> 13)) >> 25;
 8002666:	4b69      	ldr	r3, [pc, #420]	; (800280c <BME280_ReadPressure+0x474>)
 8002668:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800266c:	b219      	sxth	r1, r3
 800266e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002672:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8002676:	0b58      	lsrs	r0, r3, #13
 8002678:	65b8      	str	r0, [r7, #88]	; 0x58
 800267a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800267c:	ea40 40c4 	orr.w	r0, r0, r4, lsl #19
 8002680:	65b8      	str	r0, [r7, #88]	; 0x58
 8002682:	1363      	asrs	r3, r4, #13
 8002684:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002686:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800268a:	4623      	mov	r3, r4
 800268c:	fb03 f002 	mul.w	r0, r3, r2
 8002690:	462b      	mov	r3, r5
 8002692:	fb01 f303 	mul.w	r3, r1, r3
 8002696:	4403      	add	r3, r0
 8002698:	4620      	mov	r0, r4
 800269a:	fba1 0100 	umull	r0, r1, r1, r0
 800269e:	440b      	add	r3, r1
 80026a0:	4619      	mov	r1, r3
 80026a2:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80026a6:	0b5a      	lsrs	r2, r3, #13
 80026a8:	653a      	str	r2, [r7, #80]	; 0x50
 80026aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80026ac:	ea42 42c4 	orr.w	r2, r2, r4, lsl #19
 80026b0:	653a      	str	r2, [r7, #80]	; 0x50
 80026b2:	1363      	asrs	r3, r4, #13
 80026b4:	657b      	str	r3, [r7, #84]	; 0x54
 80026b6:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80026ba:	4623      	mov	r3, r4
 80026bc:	fb03 f201 	mul.w	r2, r3, r1
 80026c0:	462b      	mov	r3, r5
 80026c2:	fb00 f303 	mul.w	r3, r0, r3
 80026c6:	441a      	add	r2, r3
 80026c8:	4623      	mov	r3, r4
 80026ca:	fba0 3403 	umull	r3, r4, r0, r3
 80026ce:	4422      	add	r2, r4
 80026d0:	4614      	mov	r4, r2
 80026d2:	0e5a      	lsrs	r2, r3, #25
 80026d4:	61ba      	str	r2, [r7, #24]
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 80026dc:	61ba      	str	r2, [r7, #24]
 80026de:	1663      	asrs	r3, r4, #25
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80026e6:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	tmp_2 = (((int64_t)CalibData.presureValue.dig_P8) * presureInt) >> 19;
 80026ea:	4b48      	ldr	r3, [pc, #288]	; (800280c <BME280_ReadPressure+0x474>)
 80026ec:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80026f0:	b21b      	sxth	r3, r3
 80026f2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80026f6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80026fa:	fb04 f102 	mul.w	r1, r4, r2
 80026fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002702:	fb03 f202 	mul.w	r2, r3, r2
 8002706:	440a      	add	r2, r1
 8002708:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800270c:	fba1 3403 	umull	r3, r4, r1, r3
 8002710:	4422      	add	r2, r4
 8002712:	4614      	mov	r4, r2
 8002714:	0cda      	lsrs	r2, r3, #19
 8002716:	613a      	str	r2, [r7, #16]
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 800271e:	613a      	str	r2, [r7, #16]
 8002720:	14e3      	asrs	r3, r4, #19
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002728:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78

	presureInt = ((presureInt + tmp_1 + tmp_2) >> 8) + ((int64_t)CalibData.presureValue.dig_P7 << 4);
 800272c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002730:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8002734:	18c9      	adds	r1, r1, r3
 8002736:	eb42 0204 	adc.w	r2, r2, r4
 800273a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800273e:	185b      	adds	r3, r3, r1
 8002740:	eb44 0402 	adc.w	r4, r4, r2
 8002744:	0a1a      	lsrs	r2, r3, #8
 8002746:	64ba      	str	r2, [r7, #72]	; 0x48
 8002748:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800274a:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 800274e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002750:	1223      	asrs	r3, r4, #8
 8002752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002754:	4b2d      	ldr	r3, [pc, #180]	; (800280c <BME280_ReadPressure+0x474>)
 8002756:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800275a:	b21b      	sxth	r3, r3
 800275c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002760:	0122      	lsls	r2, r4, #4
 8002762:	647a      	str	r2, [r7, #68]	; 0x44
 8002764:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002766:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 800276a:	647a      	str	r2, [r7, #68]	; 0x44
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	643b      	str	r3, [r7, #64]	; 0x40
 8002770:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8002774:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002778:	185b      	adds	r3, r3, r1
 800277a:	eb44 0402 	adc.w	r4, r4, r2
 800277e:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90

	presUint = ((presureInt >> 8) * 1000) + (((presureInt & 0xff) * 390625) / 100000);
 8002782:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8002786:	0a1a      	lsrs	r2, r3, #8
 8002788:	63ba      	str	r2, [r7, #56]	; 0x38
 800278a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800278c:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8002790:	63ba      	str	r2, [r7, #56]	; 0x38
 8002792:	1223      	asrs	r3, r4, #8
 8002794:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002796:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800279c:	fb03 f502 	mul.w	r5, r3, r2
 80027a0:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80027a4:	f04f 01ff 	mov.w	r1, #255	; 0xff
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	ea03 0301 	and.w	r3, r3, r1
 80027b0:	ea04 0402 	and.w	r4, r4, r2
 80027b4:	4a16      	ldr	r2, [pc, #88]	; (8002810 <BME280_ReadPressure+0x478>)
 80027b6:	fb02 f104 	mul.w	r1, r2, r4
 80027ba:	2200      	movs	r2, #0
 80027bc:	fb02 f203 	mul.w	r2, r2, r3
 80027c0:	440a      	add	r2, r1
 80027c2:	4913      	ldr	r1, [pc, #76]	; (8002810 <BME280_ReadPressure+0x478>)
 80027c4:	fba3 0101 	umull	r0, r1, r3, r1
 80027c8:	1853      	adds	r3, r2, r1
 80027ca:	4619      	mov	r1, r3
 80027cc:	4a11      	ldr	r2, [pc, #68]	; (8002814 <BME280_ReadPressure+0x47c>)
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	f7fd fcf9 	bl	80001c8 <__aeabi_ldivmod>
 80027d6:	4603      	mov	r3, r0
 80027d8:	460c      	mov	r4, r1
 80027da:	442b      	add	r3, r5
 80027dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	pressFloat = presUint / 100.0f;
 80027e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027e4:	ee07 3a90 	vmov	s15, r3
 80027e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027ec:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002818 <BME280_ReadPressure+0x480>
 80027f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027f4:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

	return pressFloat;
 80027f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027fc:	ee07 3a90 	vmov	s15, r3
}
 8002800:	eeb0 0a67 	vmov.f32	s0, s15
 8002804:	37a0      	adds	r7, #160	; 0xa0
 8002806:	46bd      	mov	sp, r7
 8002808:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800280c:	2000009c 	.word	0x2000009c
 8002810:	0005f5e1 	.word	0x0005f5e1
 8002814:	000186a0 	.word	0x000186a0
 8002818:	42c80000 	.word	0x42c80000

0800281c <BME280_ReadHumidity>:


float BME280_ReadHumidity(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
	float humidConverted = 0.0f;
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]
	int16_t humidRawValue = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	807b      	strh	r3, [r7, #2]
	int32_t humidRaw32 = 0;
 800282c:	2300      	movs	r3, #0
 800282e:	60bb      	str	r3, [r7, #8]
	int32_t tmpValue = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	607b      	str	r3, [r7, #4]

	BME280_ReadTemperature();
 8002834:	f7ff fd4e 	bl	80022d4 <BME280_ReadTemperature>
	bme280_ReadSignedData16_Convert(BME280_REGISTER_HUMIDDATA, &humidRawValue);
 8002838:	1cbb      	adds	r3, r7, #2
 800283a:	4619      	mov	r1, r3
 800283c:	20fd      	movs	r0, #253	; 0xfd
 800283e:	f000 f8d6 	bl	80029ee <bme280_ReadSignedData16_Convert>
	if(humidRawValue == 0x8000)
	{
		return 0xFFFF;
	}

	humidRaw32 = ((int32_t)humidRawValue)&0x0000FFFF;
 8002842:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002846:	b29b      	uxth	r3, r3
 8002848:	60bb      	str	r3, [r7, #8]

	tmpValue = (tFineValue - ((int32_t)76800));
 800284a:	4b35      	ldr	r3, [pc, #212]	; (8002920 <BME280_ReadHumidity+0x104>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8002852:	607b      	str	r3, [r7, #4]
	tmpValue = (((((humidRaw32 << 14) - (((int32_t)CalibData.humidValue.dig_H4) << 20) -
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	039a      	lsls	r2, r3, #14
 8002858:	4b32      	ldr	r3, [pc, #200]	; (8002924 <BME280_ReadHumidity+0x108>)
 800285a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800285e:	051b      	lsls	r3, r3, #20
 8002860:	1ad2      	subs	r2, r2, r3
		(((int32_t)CalibData.humidValue.dig_H5) * tmpValue)) + ((int32_t)16384)) >> 15) *
 8002862:	4b30      	ldr	r3, [pc, #192]	; (8002924 <BME280_ReadHumidity+0x108>)
 8002864:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002868:	4619      	mov	r1, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	fb03 f301 	mul.w	r3, r3, r1
	tmpValue = (((((humidRaw32 << 14) - (((int32_t)CalibData.humidValue.dig_H4) << 20) -
 8002870:	1ad3      	subs	r3, r2, r3
		(((int32_t)CalibData.humidValue.dig_H5) * tmpValue)) + ((int32_t)16384)) >> 15) *
 8002872:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002876:	13db      	asrs	r3, r3, #15
		(((((((tmpValue * ((int32_t)CalibData.humidValue.dig_H6)) >> 10) *
 8002878:	4a2a      	ldr	r2, [pc, #168]	; (8002924 <BME280_ReadHumidity+0x108>)
 800287a:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 800287e:	4611      	mov	r1, r2
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	fb02 f201 	mul.w	r2, r2, r1
 8002886:	1292      	asrs	r2, r2, #10
		(((tmpValue * ((int32_t)CalibData.humidValue.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8002888:	4926      	ldr	r1, [pc, #152]	; (8002924 <BME280_ReadHumidity+0x108>)
 800288a:	7f09      	ldrb	r1, [r1, #28]
 800288c:	4608      	mov	r0, r1
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	fb01 f100 	mul.w	r1, r1, r0
 8002894:	12c9      	asrs	r1, r1, #11
 8002896:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
		(((((((tmpValue * ((int32_t)CalibData.humidValue.dig_H6)) >> 10) *
 800289a:	fb01 f202 	mul.w	r2, r1, r2
		(((tmpValue * ((int32_t)CalibData.humidValue.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 800289e:	1292      	asrs	r2, r2, #10
 80028a0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
		((int32_t)2097152)) * ((int32_t)CalibData.humidValue.dig_H2) + 8192) >> 14));
 80028a4:	491f      	ldr	r1, [pc, #124]	; (8002924 <BME280_ReadHumidity+0x108>)
 80028a6:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 80028aa:	fb01 f202 	mul.w	r2, r1, r2
 80028ae:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80028b2:	1392      	asrs	r2, r2, #14
	tmpValue = (((((humidRaw32 << 14) - (((int32_t)CalibData.humidValue.dig_H4) << 20) -
 80028b4:	fb02 f303 	mul.w	r3, r2, r3
 80028b8:	607b      	str	r3, [r7, #4]

	tmpValue = (tmpValue - (((((tmpValue >> 15) * (tmpValue >> 15)) >> 7) *
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	13db      	asrs	r3, r3, #15
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	13d2      	asrs	r2, r2, #15
 80028c2:	fb02 f303 	mul.w	r3, r2, r3
 80028c6:	11db      	asrs	r3, r3, #7
		((int32_t)CalibData.humidValue.dig_H1)) >> 4));
 80028c8:	4a16      	ldr	r2, [pc, #88]	; (8002924 <BME280_ReadHumidity+0x108>)
 80028ca:	7e12      	ldrb	r2, [r2, #24]
	tmpValue = (tmpValue - (((((tmpValue >> 15) * (tmpValue >> 15)) >> 7) *
 80028cc:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.humidValue.dig_H1)) >> 4));
 80028d0:	111b      	asrs	r3, r3, #4
	tmpValue = (tmpValue - (((((tmpValue >> 15) * (tmpValue >> 15)) >> 7) *
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	607b      	str	r3, [r7, #4]
	tmpValue = (tmpValue < 0) ? 0 : tmpValue;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80028de:	607b      	str	r3, [r7, #4]
	tmpValue = (tmpValue > 419430400) ? 419430400 : tmpValue;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80028e6:	bfa8      	it	ge
 80028e8:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80028ec:	607b      	str	r3, [r7, #4]

	humidConverted = (tmpValue>>12);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	131b      	asrs	r3, r3, #12
 80028f2:	ee07 3a90 	vmov	s15, r3
 80028f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028fa:	edc7 7a03 	vstr	s15, [r7, #12]
	humidConverted /= 1024.0f;
 80028fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8002902:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002928 <BME280_ReadHumidity+0x10c>
 8002906:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800290a:	edc7 7a03 	vstr	s15, [r7, #12]

	return humidConverted;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	ee07 3a90 	vmov	s15, r3
}
 8002914:	eeb0 0a67 	vmov.f32	s0, s15
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	2000002c 	.word	0x2000002c
 8002924:	2000009c 	.word	0x2000009c
 8002928:	44800000 	.word	0x44800000

0800292c <bme280_WriteReg>:
	return altitude;
}

//Communication with BME280
static void bme280_WriteReg(uint8_t readRegister, uint8_t valueToWrite)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	460a      	mov	r2, r1
 8002936:	71fb      	strb	r3, [r7, #7]
 8002938:	4613      	mov	r3, r2
 800293a:	71bb      	strb	r3, [r7, #6]
#ifdef SPI
	SPIx_WriteData(readRegister, valueToWrite);
 800293c:	79ba      	ldrb	r2, [r7, #6]
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fb54 	bl	8001ff0 <SPIx_WriteData>
#elif I2C
	I2Cx_WriteData(BME280_ADDRESS, readRegister, valueToWrite);
#endif

}
 8002948:	bf00      	nop
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <bme280_ReadReg>:
//------------------------------------------------
static uint8_t bme280_ReadReg(uint8_t readRegister)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	71fb      	strb	r3, [r7, #7]
#ifdef SPI
	uint8_t readedStatus = SPIx_ReadData(readRegister);
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff fb71 	bl	8002044 <SPIx_ReadData>
 8002962:	4603      	mov	r3, r0
 8002964:	73fb      	strb	r3, [r7, #15]
#elif I2C
	uint8_t readedStatus = I2Cx_ReadData(BME280_ADDRESS, readRegister);
#endif

  return readedStatus;
 8002966:	7bfb      	ldrb	r3, [r7, #15]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <bme280_ReadRegPtr>:
//------------------------------------------------
static void bme280_ReadRegPtr(uint8_t readRegister, uint8_t *ptrReadedValue)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	6039      	str	r1, [r7, #0]
 800297a:	71fb      	strb	r3, [r7, #7]
#ifdef SPI
	 *(uint8_t *)ptrReadedValue = SPIx_ReadData(readRegister);
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fb60 	bl	8002044 <SPIx_ReadData>
 8002984:	4603      	mov	r3, r0
 8002986:	461a      	mov	r2, r3
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	701a      	strb	r2, [r3, #0]
	 *(uint8_t *)ptrReadedValue = I2Cx_ReadData(BME280_ADDRESS, readRegister);
#endif



}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <bme280_ReadStatus>:
//------------------------------------------------
static uint8_t bme280_ReadStatus(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
  uint8_t res = bme280_ReadReg(BME280_REGISTER_STATUS) & 0x09;
 800299a:	20f3      	movs	r0, #243	; 0xf3
 800299c:	f7ff ffd8 	bl	8002950 <bme280_ReadReg>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f003 0309 	and.w	r3, r3, #9
 80029a6:	71fb      	strb	r3, [r7, #7]
  return res;
 80029a8:	79fb      	ldrb	r3, [r7, #7]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <bme280_ReadData16>:
//------------------------------------------------
static void bme280_ReadData16(uint8_t readRegister, uint16_t *ptrReadedValue)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	4603      	mov	r3, r0
 80029ba:	6039      	str	r1, [r7, #0]
 80029bc:	71fb      	strb	r3, [r7, #7]
#ifdef SPI
	SPIx_ReadData16(readRegister, ptrReadedValue);
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	6839      	ldr	r1, [r7, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff fb68 	bl	8002098 <SPIx_ReadData16>
#elif I2C
	 I2Cx_ReadData16(BME280_ADDRESS, readRegister, ptrReadedValue);
#endif

}
 80029c8:	bf00      	nop
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <bme280_ReadSignedData16>:
//------------------------------------------------
static void bme280_ReadSignedData16(uint8_t readRegister, int16_t *ptrReadedValue)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	6039      	str	r1, [r7, #0]
 80029da:	71fb      	strb	r3, [r7, #7]
#ifdef SPI
	SPIx_ReadData16(readRegister, (uint16_t*)ptrReadedValue);
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	6839      	ldr	r1, [r7, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fb59 	bl	8002098 <SPIx_ReadData16>
#elif I2C
	I2Cx_ReadData16(BME280_ADDRESS, readRegister, (uint16_t*)ptrReadedValue);
#endif

}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <bme280_ReadSignedData16_Convert>:
//------------------------------------------------
static void bme280_ReadSignedData16_Convert(uint8_t readRegister, int16_t *ptrReadedValue)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	6039      	str	r1, [r7, #0]
 80029f8:	71fb      	strb	r3, [r7, #7]
#ifdef SPI
	  SPIx_ReadData16(readRegister, (uint16_t*)ptrReadedValue);
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	6839      	ldr	r1, [r7, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fb4a 	bl	8002098 <SPIx_ReadData16>
	  *(uint16_t *)ptrReadedValue = convert16BitData(*(uint16_t *)ptrReadedValue);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff faa7 	bl	8001f5c <convert16BitData>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	461a      	mov	r2, r3
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	801a      	strh	r2, [r3, #0]
	  I2Cx_ReadData16(BME280_ADDRESS, readRegister, (uint16_t*)ptrReadedValue);
	  *(uint16_t *)ptrReadedValue = convert16BitData(*(uint16_t *)ptrReadedValue);
#endif


}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <bme280_ReadRegDataConvert24>:
//------------------------------------------------
static void bme280_ReadRegDataConvert24(uint8_t readRegister, uint32_t *ptrReadedValue)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	4603      	mov	r3, r0
 8002a26:	6039      	str	r1, [r7, #0]
 8002a28:	71fb      	strb	r3, [r7, #7]
#ifdef SPI
	SPIx_ReadData24(readRegister, ptrReadedValue);
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	6839      	ldr	r1, [r7, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fb6c 	bl	800210c <SPIx_ReadData24>
	*(uint32_t *) ptrReadedValue = convert24BitData(*(uint32_t *) ptrReadedValue) & 0x00FFFFFF;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff faa4 	bl	8001f86 <convert24BitData>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	601a      	str	r2, [r3, #0]
	I2Cx_ReadData24(BME280_ADDRESS, readRegister, ptrReadedValue);
	*(uint32_t *) ptrReadedValue = convert24BitData(*(uint32_t *) ptrReadedValue) & 0x00FFFFFF;
#endif


}
 8002a48:	bf00      	nop
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <bme280_ReadCoefficients_Temp>:
//------------------------------------------------
/*
 * @brief: read factory set coeficiency
 */
static void bme280_ReadCoefficients_Temp(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
	bme280_ReadData16(BME280_REGISTER_DIG_T1, &CalibData.tempValue.dig_T1);
 8002a54:	4906      	ldr	r1, [pc, #24]	; (8002a70 <bme280_ReadCoefficients_Temp+0x20>)
 8002a56:	2088      	movs	r0, #136	; 0x88
 8002a58:	f7ff ffab 	bl	80029b2 <bme280_ReadData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_T2, &CalibData.tempValue.dig_T2);
 8002a5c:	4905      	ldr	r1, [pc, #20]	; (8002a74 <bme280_ReadCoefficients_Temp+0x24>)
 8002a5e:	208a      	movs	r0, #138	; 0x8a
 8002a60:	f7ff ffb6 	bl	80029d0 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_T3, &CalibData.tempValue.dig_T3);
 8002a64:	4904      	ldr	r1, [pc, #16]	; (8002a78 <bme280_ReadCoefficients_Temp+0x28>)
 8002a66:	208c      	movs	r0, #140	; 0x8c
 8002a68:	f7ff ffb2 	bl	80029d0 <bme280_ReadSignedData16>
}
 8002a6c:	bf00      	nop
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	2000009c 	.word	0x2000009c
 8002a74:	2000009e 	.word	0x2000009e
 8002a78:	200000a0 	.word	0x200000a0

08002a7c <bme280_ReadCoefficients_Pres>:

static void bme280_ReadCoefficients_Pres(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
	bme280_ReadData16(BME280_REGISTER_DIG_P1, &CalibData.presureValue.dig_P1);
 8002a80:	4912      	ldr	r1, [pc, #72]	; (8002acc <bme280_ReadCoefficients_Pres+0x50>)
 8002a82:	208e      	movs	r0, #142	; 0x8e
 8002a84:	f7ff ff95 	bl	80029b2 <bme280_ReadData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P2, &CalibData.presureValue.dig_P2);
 8002a88:	4911      	ldr	r1, [pc, #68]	; (8002ad0 <bme280_ReadCoefficients_Pres+0x54>)
 8002a8a:	2090      	movs	r0, #144	; 0x90
 8002a8c:	f7ff ffa0 	bl	80029d0 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P3, &CalibData.presureValue.dig_P3);
 8002a90:	4910      	ldr	r1, [pc, #64]	; (8002ad4 <bme280_ReadCoefficients_Pres+0x58>)
 8002a92:	2092      	movs	r0, #146	; 0x92
 8002a94:	f7ff ff9c 	bl	80029d0 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P4, &CalibData.presureValue.dig_P4);
 8002a98:	490f      	ldr	r1, [pc, #60]	; (8002ad8 <bme280_ReadCoefficients_Pres+0x5c>)
 8002a9a:	2094      	movs	r0, #148	; 0x94
 8002a9c:	f7ff ff98 	bl	80029d0 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P5, &CalibData.presureValue.dig_P5);
 8002aa0:	490e      	ldr	r1, [pc, #56]	; (8002adc <bme280_ReadCoefficients_Pres+0x60>)
 8002aa2:	2096      	movs	r0, #150	; 0x96
 8002aa4:	f7ff ff94 	bl	80029d0 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P6, &CalibData.presureValue.dig_P6);
 8002aa8:	490d      	ldr	r1, [pc, #52]	; (8002ae0 <bme280_ReadCoefficients_Pres+0x64>)
 8002aaa:	2098      	movs	r0, #152	; 0x98
 8002aac:	f7ff ff90 	bl	80029d0 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P7, &CalibData.presureValue.dig_P7);
 8002ab0:	490c      	ldr	r1, [pc, #48]	; (8002ae4 <bme280_ReadCoefficients_Pres+0x68>)
 8002ab2:	209a      	movs	r0, #154	; 0x9a
 8002ab4:	f7ff ff8c 	bl	80029d0 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P8, &CalibData.presureValue.dig_P8);
 8002ab8:	490b      	ldr	r1, [pc, #44]	; (8002ae8 <bme280_ReadCoefficients_Pres+0x6c>)
 8002aba:	209c      	movs	r0, #156	; 0x9c
 8002abc:	f7ff ff88 	bl	80029d0 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P9, &CalibData.presureValue.dig_P9);
 8002ac0:	490a      	ldr	r1, [pc, #40]	; (8002aec <bme280_ReadCoefficients_Pres+0x70>)
 8002ac2:	209e      	movs	r0, #158	; 0x9e
 8002ac4:	f7ff ff84 	bl	80029d0 <bme280_ReadSignedData16>
}
 8002ac8:	bf00      	nop
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	200000a2 	.word	0x200000a2
 8002ad0:	200000a4 	.word	0x200000a4
 8002ad4:	200000a6 	.word	0x200000a6
 8002ad8:	200000a8 	.word	0x200000a8
 8002adc:	200000aa 	.word	0x200000aa
 8002ae0:	200000ac 	.word	0x200000ac
 8002ae4:	200000ae 	.word	0x200000ae
 8002ae8:	200000b0 	.word	0x200000b0
 8002aec:	200000b2 	.word	0x200000b2

08002af0 <bme280_ReadCoefficients_Hum>:

static void bme280_ReadCoefficients_Hum(void)
{
 8002af0:	b598      	push	{r3, r4, r7, lr}
 8002af2:	af00      	add	r7, sp, #0
	bme280_ReadRegPtr(BME280_REGISTER_DIG_H1, &CalibData.humidValue.dig_H1);
 8002af4:	491c      	ldr	r1, [pc, #112]	; (8002b68 <bme280_ReadCoefficients_Hum+0x78>)
 8002af6:	20a1      	movs	r0, #161	; 0xa1
 8002af8:	f7ff ff3a 	bl	8002970 <bme280_ReadRegPtr>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_H2, &CalibData.humidValue.dig_H2);
 8002afc:	491b      	ldr	r1, [pc, #108]	; (8002b6c <bme280_ReadCoefficients_Hum+0x7c>)
 8002afe:	20e1      	movs	r0, #225	; 0xe1
 8002b00:	f7ff ff66 	bl	80029d0 <bme280_ReadSignedData16>
	bme280_ReadRegPtr(BME280_REGISTER_DIG_H3, &CalibData.humidValue.dig_H3);
 8002b04:	491a      	ldr	r1, [pc, #104]	; (8002b70 <bme280_ReadCoefficients_Hum+0x80>)
 8002b06:	20e3      	movs	r0, #227	; 0xe3
 8002b08:	f7ff ff32 	bl	8002970 <bme280_ReadRegPtr>

	CalibData.humidValue.dig_H4 = (bme280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (bme280_ReadReg(BME280_REGISTER_DIG_H4+1) & 0xF);
 8002b0c:	20e4      	movs	r0, #228	; 0xe4
 8002b0e:	f7ff ff1f 	bl	8002950 <bme280_ReadReg>
 8002b12:	4603      	mov	r3, r0
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	b21c      	sxth	r4, r3
 8002b18:	20e5      	movs	r0, #229	; 0xe5
 8002b1a:	f7ff ff19 	bl	8002950 <bme280_ReadReg>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	b21b      	sxth	r3, r3
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	b21b      	sxth	r3, r3
 8002b28:	4323      	orrs	r3, r4
 8002b2a:	b21a      	sxth	r2, r3
 8002b2c:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <bme280_ReadCoefficients_Hum+0x84>)
 8002b2e:	83da      	strh	r2, [r3, #30]
	CalibData.humidValue.dig_H5 = (bme280_ReadReg(BME280_REGISTER_DIG_H5+1) << 4) | (bme280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 8002b30:	20e6      	movs	r0, #230	; 0xe6
 8002b32:	f7ff ff0d 	bl	8002950 <bme280_ReadReg>
 8002b36:	4603      	mov	r3, r0
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	b21c      	sxth	r4, r3
 8002b3c:	20e5      	movs	r0, #229	; 0xe5
 8002b3e:	f7ff ff07 	bl	8002950 <bme280_ReadReg>
 8002b42:	4603      	mov	r3, r0
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	b21b      	sxth	r3, r3
 8002b4a:	4323      	orrs	r3, r4
 8002b4c:	b21a      	sxth	r2, r3
 8002b4e:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <bme280_ReadCoefficients_Hum+0x84>)
 8002b50:	841a      	strh	r2, [r3, #32]
	CalibData.humidValue.dig_H6 = (int8_t)bme280_ReadReg(BME280_REGISTER_DIG_H6);
 8002b52:	20e7      	movs	r0, #231	; 0xe7
 8002b54:	f7ff fefc 	bl	8002950 <bme280_ReadReg>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	b25a      	sxtb	r2, r3
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <bme280_ReadCoefficients_Hum+0x84>)
 8002b5e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8002b62:	bf00      	nop
 8002b64:	bd98      	pop	{r3, r4, r7, pc}
 8002b66:	bf00      	nop
 8002b68:	200000b4 	.word	0x200000b4
 8002b6c:	200000b6 	.word	0x200000b6
 8002b70:	200000b8 	.word	0x200000b8
 8002b74:	2000009c 	.word	0x2000009c

08002b78 <bme280_ReadCoefficients>:

static void bme280_ReadCoefficients(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
	bme280_ReadCoefficients_Temp();
 8002b7c:	f7ff ff68 	bl	8002a50 <bme280_ReadCoefficients_Temp>

	bme280_ReadCoefficients_Pres();
 8002b80:	f7ff ff7c 	bl	8002a7c <bme280_ReadCoefficients_Pres>

	bme280_ReadCoefficients_Hum();
 8002b84:	f7ff ffb4 	bl	8002af0 <bme280_ReadCoefficients_Hum>
}
 8002b88:	bf00      	nop
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <bme280_SetStandby>:
//------------------------------------------------
static void bme280_SetStandby(BME280_standby_Time_E standByTime)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	71fb      	strb	r3, [r7, #7]
  uint8_t registerValue = 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	73fb      	strb	r3, [r7, #15]

  registerValue = bme280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 8002b9a:	20f5      	movs	r0, #245	; 0xf5
 8002b9c:	f7ff fed8 	bl	8002950 <bme280_ReadReg>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	73fb      	strb	r3, [r7, #15]
  registerValue |= standByTime & BME280_STBY_MSK;
 8002ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bac:	f023 031f 	bic.w	r3, r3, #31
 8002bb0:	b25a      	sxtb	r2, r3
 8002bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	b25b      	sxtb	r3, r3
 8002bba:	73fb      	strb	r3, [r7, #15]

  bme280_WriteReg(BME280_REG_CONFIG, registerValue);
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	20f5      	movs	r0, #245	; 0xf5
 8002bc2:	f7ff feb3 	bl	800292c <bme280_WriteReg>
}
 8002bc6:	bf00      	nop
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <bme280_SetFilter>:

static void bme280_SetFilter(BME280_filter_E filter)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 8002bdc:	20f5      	movs	r0, #245	; 0xf5
 8002bde:	f7ff feb7 	bl	8002950 <bme280_ReadReg>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f023 031c 	bic.w	r3, r3, #28
 8002be8:	73fb      	strb	r3, [r7, #15]
	registerValue |= filter & BME280_FILTER_MSK;
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	f003 031c 	and.w	r3, r3, #28
 8002bf2:	b25a      	sxtb	r2, r3
 8002bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	b25b      	sxtb	r3, r3
 8002bfc:	73fb      	strb	r3, [r7, #15]

	bme280_WriteReg(BME280_REG_CONFIG, registerValue);
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
 8002c00:	4619      	mov	r1, r3
 8002c02:	20f5      	movs	r0, #245	; 0xf5
 8002c04:	f7ff fe92 	bl	800292c <bme280_WriteReg>
}
 8002c08:	bf00      	nop
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <bme280_SetOversamplingTemper>:

static void bme280_SetOversamplingTemper(BME280_overSamplingTemp_E tempOversampl)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 8002c1e:	20f4      	movs	r0, #244	; 0xf4
 8002c20:	f7ff fe96 	bl	8002950 <bme280_ReadReg>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f003 031f 	and.w	r3, r3, #31
 8002c2a:	73fb      	strb	r3, [r7, #15]
	registerValue |= tempOversampl & BME280_OSRS_T_MSK;
 8002c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c30:	f023 031f 	bic.w	r3, r3, #31
 8002c34:	b25a      	sxtb	r2, r3
 8002c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	b25b      	sxtb	r3, r3
 8002c3e:	73fb      	strb	r3, [r7, #15]

	bme280_WriteReg(BME280_REG_CTRL_MEAS, registerValue);
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	4619      	mov	r1, r3
 8002c44:	20f4      	movs	r0, #244	; 0xf4
 8002c46:	f7ff fe71 	bl	800292c <bme280_WriteReg>
}
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <bme280_SetOversamplingPressure>:

static void bme280_SetOversamplingPressure(BME280_overSamplingPres_E presOversampl)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b084      	sub	sp, #16
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	4603      	mov	r3, r0
 8002c5a:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 8002c60:	20f4      	movs	r0, #244	; 0xf4
 8002c62:	f7ff fe75 	bl	8002950 <bme280_ReadReg>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f023 031c 	bic.w	r3, r3, #28
 8002c6c:	73fb      	strb	r3, [r7, #15]
	registerValue |= presOversampl & BME280_OSRS_P_MSK;
 8002c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c72:	f003 031c 	and.w	r3, r3, #28
 8002c76:	b25a      	sxtb	r2, r3
 8002c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	b25b      	sxtb	r3, r3
 8002c80:	73fb      	strb	r3, [r7, #15]

	bme280_WriteReg(BME280_REG_CTRL_MEAS,registerValue);
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	4619      	mov	r1, r3
 8002c86:	20f4      	movs	r0, #244	; 0xf4
 8002c88:	f7ff fe50 	bl	800292c <bme280_WriteReg>
}
 8002c8c:	bf00      	nop
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <bme280_SetOversamplingHum>:

static void bme280_SetOversamplingHum(BME280_overSamplingHum_E humOversampl)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 8002ca2:	20f2      	movs	r0, #242	; 0xf2
 8002ca4:	f7ff fe54 	bl	8002950 <bme280_ReadReg>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f023 0307 	bic.w	r3, r3, #7
 8002cae:	73fb      	strb	r3, [r7, #15]
	registerValue |= humOversampl & BME280_OSRS_H_MSK;
 8002cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	b25a      	sxtb	r2, r3
 8002cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	b25b      	sxtb	r3, r3
 8002cc2:	73fb      	strb	r3, [r7, #15]
	bme280_WriteReg(BME280_REG_CTRL_HUM,registerValue);
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	20f2      	movs	r0, #242	; 0xf2
 8002cca:	f7ff fe2f 	bl	800292c <bme280_WriteReg>

	/* Reewrite setting to change oversamplig efectivly */
	registerValue = bme280_ReadReg(BME280_REG_CTRL_MEAS);
 8002cce:	20f4      	movs	r0, #244	; 0xf4
 8002cd0:	f7ff fe3e 	bl	8002950 <bme280_ReadReg>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	73fb      	strb	r3, [r7, #15]
	bme280_WriteReg(BME280_REG_CTRL_MEAS,registerValue);
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	20f4      	movs	r0, #244	; 0xf4
 8002cde:	f7ff fe25 	bl	800292c <bme280_WriteReg>
}
 8002ce2:	bf00      	nop
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <bme280_SetMode>:

static void bme280_SetMode(BME280_mode_E mode)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b084      	sub	sp, #16
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 8002cf8:	20f4      	movs	r0, #244	; 0xf4
 8002cfa:	f7ff fe29 	bl	8002950 <bme280_ReadReg>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f023 0303 	bic.w	r3, r3, #3
 8002d04:	73fb      	strb	r3, [r7, #15]
	registerValue |= mode & BME280_MODE_MSK;
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	b25a      	sxtb	r2, r3
 8002d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	b25b      	sxtb	r3, r3
 8002d18:	73fb      	strb	r3, [r7, #15]

	bme280_WriteReg(BME280_REG_CTRL_MEAS, registerValue);
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	20f4      	movs	r0, #244	; 0xf4
 8002d20:	f7ff fe04 	bl	800292c <bme280_WriteReg>
}
 8002d24:	bf00      	nop
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d30:	4a16      	ldr	r2, [pc, #88]	; (8002d8c <SystemInit+0x60>)
 8002d32:	4b16      	ldr	r3, [pc, #88]	; (8002d8c <SystemInit+0x60>)
 8002d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002d40:	4a13      	ldr	r2, [pc, #76]	; (8002d90 <SystemInit+0x64>)
 8002d42:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <SystemInit+0x64>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d4c:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <SystemInit+0x64>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002d52:	4a0f      	ldr	r2, [pc, #60]	; (8002d90 <SystemInit+0x64>)
 8002d54:	4b0e      	ldr	r3, [pc, #56]	; (8002d90 <SystemInit+0x64>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d60:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002d62:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <SystemInit+0x64>)
 8002d64:	4a0b      	ldr	r2, [pc, #44]	; (8002d94 <SystemInit+0x68>)
 8002d66:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002d68:	4a09      	ldr	r2, [pc, #36]	; (8002d90 <SystemInit+0x64>)
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <SystemInit+0x64>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <SystemInit+0x64>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d7a:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <SystemInit+0x60>)
 8002d7c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d80:	609a      	str	r2, [r3, #8]
#endif
}
 8002d82:	bf00      	nop
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000ed00 	.word	0xe000ed00
 8002d90:	40023800 	.word	0x40023800
 8002d94:	24003010 	.word	0x24003010

08002d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d9e:	e003      	b.n	8002da8 <LoopCopyDataInit>

08002da0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002da0:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002da2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002da4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002da6:	3104      	adds	r1, #4

08002da8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002da8:	480b      	ldr	r0, [pc, #44]	; (8002dd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002daa:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002dac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002dae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002db0:	d3f6      	bcc.n	8002da0 <CopyDataInit>
  ldr  r2, =_sbss
 8002db2:	4a0b      	ldr	r2, [pc, #44]	; (8002de0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002db4:	e002      	b.n	8002dbc <LoopFillZerobss>

08002db6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002db6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002db8:	f842 3b04 	str.w	r3, [r2], #4

08002dbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002dbc:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002dbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002dc0:	d3f9      	bcc.n	8002db6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002dc2:	f7ff ffb3 	bl	8002d2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dc6:	f000 f811 	bl	8002dec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dca:	f7fe fedf 	bl	8001b8c <main>
  bx  lr    
 8002dce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002dd0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002dd4:	08002e7c 	.word	0x08002e7c
  ldr  r0, =_sdata
 8002dd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ddc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002de0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002de4:	200000d0 	.word	0x200000d0

08002de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002de8:	e7fe      	b.n	8002de8 <ADC_IRQHandler>
	...

08002dec <__libc_init_array>:
 8002dec:	b570      	push	{r4, r5, r6, lr}
 8002dee:	4e0d      	ldr	r6, [pc, #52]	; (8002e24 <__libc_init_array+0x38>)
 8002df0:	4c0d      	ldr	r4, [pc, #52]	; (8002e28 <__libc_init_array+0x3c>)
 8002df2:	1ba4      	subs	r4, r4, r6
 8002df4:	10a4      	asrs	r4, r4, #2
 8002df6:	2500      	movs	r5, #0
 8002df8:	42a5      	cmp	r5, r4
 8002dfa:	d109      	bne.n	8002e10 <__libc_init_array+0x24>
 8002dfc:	4e0b      	ldr	r6, [pc, #44]	; (8002e2c <__libc_init_array+0x40>)
 8002dfe:	4c0c      	ldr	r4, [pc, #48]	; (8002e30 <__libc_init_array+0x44>)
 8002e00:	f000 f820 	bl	8002e44 <_init>
 8002e04:	1ba4      	subs	r4, r4, r6
 8002e06:	10a4      	asrs	r4, r4, #2
 8002e08:	2500      	movs	r5, #0
 8002e0a:	42a5      	cmp	r5, r4
 8002e0c:	d105      	bne.n	8002e1a <__libc_init_array+0x2e>
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}
 8002e10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e14:	4798      	blx	r3
 8002e16:	3501      	adds	r5, #1
 8002e18:	e7ee      	b.n	8002df8 <__libc_init_array+0xc>
 8002e1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e1e:	4798      	blx	r3
 8002e20:	3501      	adds	r5, #1
 8002e22:	e7f2      	b.n	8002e0a <__libc_init_array+0x1e>
 8002e24:	08002e74 	.word	0x08002e74
 8002e28:	08002e74 	.word	0x08002e74
 8002e2c:	08002e74 	.word	0x08002e74
 8002e30:	08002e78 	.word	0x08002e78

08002e34 <memset>:
 8002e34:	4402      	add	r2, r0
 8002e36:	4603      	mov	r3, r0
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d100      	bne.n	8002e3e <memset+0xa>
 8002e3c:	4770      	bx	lr
 8002e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e42:	e7f9      	b.n	8002e38 <memset+0x4>

08002e44 <_init>:
 8002e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e46:	bf00      	nop
 8002e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e4a:	bc08      	pop	{r3}
 8002e4c:	469e      	mov	lr, r3
 8002e4e:	4770      	bx	lr

08002e50 <_fini>:
 8002e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e52:	bf00      	nop
 8002e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e56:	bc08      	pop	{r3}
 8002e58:	469e      	mov	lr, r3
 8002e5a:	4770      	bx	lr
